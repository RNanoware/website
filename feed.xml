<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://neillrobson.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://neillrobson.com/" rel="alternate" type="text/html" /><updated>2024-04-15T18:04:12+00:00</updated><id>https://neillrobson.com/feed.xml</id><title type="html">Neill Robson’s Website</title><subtitle>The blog and portfolio of a software developer.
</subtitle><author><name>Neill Robson</name></author><entry><title type="html">Batched Processing in RxJS</title><link href="https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/" rel="alternate" type="text/html" title="Batched Processing in RxJS" /><published>2024-04-15T17:47:00+00:00</published><updated>2024-04-15T17:47:00+00:00</updated><id>https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing</id><content type="html" xml:base="https://neillrobson.com/blog/2024/04/15/rxjs-batched-processing/"><![CDATA[<p>When you have a ton of data that all needs to be processed, reactive programming makes the implementation easy to read, terse to write, and efficient to run.
But when the data isn’t all needed, and processing the full stream is prohibitively expensive, more esoteric methods are necessary. <!--more--></p>

<h2 id="context">Context</h2>

<p>Say you have an array or stream of image files. You want to send them off to a service that runs image recognition, to identify pictures with cats in them.
You want specifically the <em>first four</em> pictures with cats. Not just any four pictures with cats: perhaps the source array is already sorted by timestamp and you want the most recent four cat pictures.</p>

<p>Stream processing, asynchronous actions… This sounds like a job for reactive programming! However, you have a couple of unique concerns:</p>

<ul>
  <li>The image recognition API is expensive to call. You don’t want to be charged for unnecessary requests.</li>
  <li>The image recognition API takes a long time for each file. You want to parallelize your processing, if possible.</li>
</ul>

<p>Even with those considerations, you’re pretty sure some creative pipelines will do the trick. You bust out your RxJS library and get started.</p>

<h2 id="concatenation">Concatenation</h2>

<p>Calling an asynchronous API for each item in an observable stream is a classic use case for one of the <code>*Map</code> operators. Every operator in that family will create a new stream for each item in the source stream, then collapse the outputs into a single stream to pass down the pipeline.</p>

<p>Some of the map operators are clearly inappropriate:</p>

<ul>
  <li><code>switchMap</code> drops old streams as soon as new source data comes in. We don’t want to lose any responses from the API.</li>
  <li><code>exhaustMap</code> ignores the source data stream while it waits for each created stream to complete. We want to check every image until we have four cats.</li>
</ul>

<p>We really just want concatenation of our API calls, so <code>concatMap</code> seems like a good choice. Our pipeline would look something like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">sourceImages$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">concatMap</span><span class="p">(</span><span class="nx">identifyImage</span><span class="p">),</span>
    <span class="nf">filter</span><span class="p">(</span><span class="nx">isCatImage</span><span class="p">),</span>
    <span class="nf">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="p">).</span><span class="nf">subscribe</span><span class="p">(</span><span class="nx">sendToMyPhone</span><span class="p">);</span>
</code></pre></div></div>

<p>It’s a clean pipeline! But in practice, this implementation processes the source images serially. Each API call must be returned before the next image is sent off.
For a slow API, such serial processing is undesirable.</p>

<div class="wide">  <figure><img src="/assets/images/2024/04/15/rxjs-batched-processing/serial.png" alt="visualization of serial pipeline processing" title="The top pipeline represents queries sent to the API. The number on each data point is the number of queries happening in parallel. The bottom pipeline contains the four images identified as cats, emitted at the time they were identified." /><figcaption>The top pipeline represents queries sent to the API. The number on each data point is the number of queries happening in parallel. The bottom pipeline contains the four images identified as cats, emitted at the time they were identified.</figcaption></figure>
</div>

<h2 id="merging">Merging</h2>

<p>We’ve got a fourth member of the <code>*Map</code> family: <code>mergeMap</code>. On the surface, it looks like precisely the operator we need.
It creates child streams and merges them into the output stream as soon as input data arrives.</p>

<p>Implementing it yields nearly identical pipeline code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">sourceImages$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">mergeMap</span><span class="p">(</span><span class="nx">identifyImage</span><span class="p">),</span>
    <span class="nf">filter</span><span class="p">(</span><span class="nx">isCatImage</span><span class="p">),</span>
    <span class="nf">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="p">).</span><span class="nf">subscribe</span><span class="p">(</span><span class="nx">sendToMyPhone</span><span class="p">);</span>
</code></pre></div></div>

<p>Testing it out yields a result worse than we started with: <strong>the order of the source images is no longer preserved</strong>. We start seeing cat pictures from decades ago, simply because they happened to be the first ones returned by the API.</p>

<div class="margin left">  <figure><img src="/assets/images/2024/04/15/rxjs-batched-processing/parallel.png" alt="visualization of parallel pipeline processing" title="Every single image is sent to the API in parallel. There were 21 images in the sample dataset, but the fourth cat image was the 17th item: we sent off four unnecessary API requests." /><figcaption>Every single image is sent to the API in parallel. There were 21 images in the sample dataset, but the fourth cat image was the 17th item: we sent off four unnecessary API requests.</figcaption></figure>
</div>

<h2 id="maintaining-order">Maintaining Order</h2>

<p>As it turns out, the serialization of streams in <code>concatMap</code> (only creating a new stream when the previous one has completed) is a feature unique to that operator.
If we simply split out the “map” part of the operator from the concatenation, we get the best of both worlds:</p>

<ul>
  <li>All of the streams are created up front (in the <code>map</code> operator)</li>
  <li>The order of the streams’ output is preserved</li>
</ul>

<div class="margin right">  <p>In between map and concatAll, each object in the stream is… itself a stream. Streamception!</p>
</div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">sourceImages$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">map</span><span class="p">(</span><span class="nx">identifyImage</span><span class="p">),</span>
    <span class="nf">concatAll</span><span class="p">(),</span>
    <span class="nf">filter</span><span class="p">(</span><span class="nx">isCatImage</span><span class="p">),</span>
    <span class="nf">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="p">).</span><span class="nf">subscribe</span><span class="p">(</span><span class="nx">sendToMyPhone</span><span class="p">);</span>
</code></pre></div></div>

<p>This pipeline fixes both our ordering issue, and also runs completely parallelized. We get super excited, until we view our monthly bill from the image recognition service.
As it turns out, this pipeline sends <em>every single image</em> to the API, as soon as it shows up in our source stream. We might send off thousands of requests before the four cat images are identified, even if the cat images are the first four images in the source stream!</p>

<h3 id="side-note-hot-vs-cold"><em>Side Note: Hot vs Cold</em></h3>

<p>If you’re trying out this code on your own, you might find that your <code>map</code>/<code>concatAll</code> implementation did not parallelize like you wanted it to. Most likely, it’s a result of implementing <code>identifyImage</code> as a pure RxJS stream, otherwise known as a “cold” observable. The difference between cold and hot observables is simple to state, hard to internalize:</p>

<ul>
  <li>Cold observables have their data created <em>inside</em> the observable</li>
  <li>Hot observables have their data created <em>outside</em> the observable</li>
</ul>

<div class="column two">
  <h3 id="cold">Cold</h3>
  <p>If I make an Observable from an array, <code>from([1, 2, 3])</code>, all of the data is already there. The computer doesn’t have to wait for anyone to get data back to it for the stream to both start and complete immediately.</p>
  <ul>
    <li>They don’t start emitting values until someone <code>subscribe</code>s to them</li>
    <li>They run a separate, unique pipeline for each subscription (they are “<strong>unicast</strong>”)</li>
  </ul>
</div>

<div class="column two">
  <h3 id="hot">Hot</h3>
  <p>Hot observables are made from things like Promises. The computer is waiting for someone else to get back to it, and the computer will emit whatever it receives as soon as it arrives.</p>
  <ul>
    <li>They emit items upon arrival, regardless of subscriber count</li>
    <li>They send data through a single pipeline, no matter how many subscribers (they are “<strong>multicast</strong>”)</li>
  </ul>
</div>

<hr />

<p>Returning to our pipeline above: if we <code>map</code> data to a <em>hot</em> observable, the API request goes out immedately (no need for a subscriber). The <code>concatAll</code> <em>does</em> end up subscribing, but the API request is already processing at that point. As each API call returns, <code>concatAll</code> will subscribe to the next one in the stream. Most likely, that latter API call will have already returned, so <code>concatAll</code> receives an immediate value, and continues.</p>

<p>On the other hand, <code>map</code>ping to a <em>cold</em> observable doesn’t kick off any process at all. The <code>concatAll</code> subscribes to the first observable, and waits for it to complete. Then it subscribes to the second observable, which hasn’t been doing anything up to this point because it’s cold (and had no subscribers)… and the effect is serialization.</p>

<p>If you want to mimic Promises in your <code>indentifyImage</code> implementation, <strong>use the <code>shareReplay</code> operator</strong> in your pipeline. For example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">identifyImage</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">pipeline</span> <span class="k">of</span><span class="p">(</span><span class="nx">img</span><span class="p">).</span><span class="nf">pipe</span><span class="p">(</span>
        <span class="nf">delay</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="mi">5000</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">())),</span> <span class="c1">// simulated delay</span>
        <span class="nf">map</span><span class="p">((</span><span class="nx">img</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">yep this is a cat</span><span class="dl">'</span><span class="p">),</span>
        <span class="nf">shareReplay</span><span class="p">()</span>
    <span class="p">);</span>
    <span class="nx">pipeline</span><span class="p">.</span><span class="nf">subscribe</span><span class="p">();</span> <span class="c1">// No argument needed: just kick off processing</span>

    <span class="k">return</span> <span class="nx">pipeline</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code>shareReplay</code> operator turns your pipeline into a multicast (hot) pipeline, and also replays past events for subscribers who hop on board after data has already arrived.</p>

<h2 id="batching">Batching</h2>

<p>We managed to get API call parallelization, while still preserving data order, but we’re calling the API way too much.
We need to design a way for the pipeline to only process the data it knows it could use, and terminate early once the four desired cat images are identified.</p>

<p>By definition, we know that full parallelization of the API calls on the input data is not efficient in most cases. The exception is when there are four or less cat pictures in the entire data set, <em>and</em> the last cat picture is at the very end.</p>

<p>Assuming that cat pictures relatively frequent, and spread evenly throughout the input dataset, a more cost-efficient strategy would be to query the API in batches.
For each batch returned, we can add the cat images to our result dataset, and then adjust our batch size based on how many slots remain for us to fill.</p>

<p>RxJS provides a <code>bufferCount</code> operator which looks promising, but the buffer size is fixed when the operator is defined. A fancier operator, <code>buffer</code>, uses a second Observable to determine when to cut/emit batches of data. It’s flexible, but also makes our solution dependent on the timing of our source data observable: an extraneous, unimportant factor.</p>

<p>We’d prefer to suspend our input stream entirely, until we’ve processed a batch of results. The <code>zipWith</code> operator comes in handy here! It’ll emit pairs of values from two Observable streams, <em>only when both of them have a value available</em>.</p>

<p>For example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">batcher$</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Subject</span><span class="p">();</span>

<span class="nx">sourceImages$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">zipWith</span><span class="p">(</span><span class="nx">batcher$</span><span class="p">),</span>  <span class="c1">// emits tuples of [image, batcherOutput]</span>
    <span class="nf">map</span><span class="p">(([</span><span class="nx">img</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nf">identifyImage</span><span class="p">(</span><span class="nx">img</span><span class="p">)),</span>  <span class="c1">// we only care about the image</span>
    <span class="nf">concatAll</span><span class="p">(),</span>
    <span class="nf">filter</span><span class="p">(</span><span class="nx">isCatImage</span><span class="p">),</span>
    <span class="nf">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="p">).</span><span class="nf">subscribe</span><span class="p">(</span><span class="nx">sendToMyPhone</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code>batcher$</code> stream controls when each source image goes through the pipeline. If we call <code>batcher$.next()</code> four times in succession, four images will immediately go into processing (assuming four images are available to process).</p>

<p>How do we initialize and manage <code>batcher$</code>?</p>

<p>We know that, when an image comes through that <em>isn’t</em> a cat, we want to call <code>batcher$.next()</code> to add another image into processing. If an image is a cat, we don’t need to trigger the batcher, because that output “slot” is filled.</p>

<p>So we now have actions we want to take for both the positives <em>and</em> negatives of our <code>filter</code> operator… meaning that we need something more robust than <code>filter</code>. Enter the <code>partition</code> utility, which splits an Observable stream into two streams for the positive and negative items against a filter!</p>

<div class="margin right">  <p>Since we are creating (and eventually subscribing to) <em>two</em> streams with the same source pipeline, we need to “share()” the pipeline to ensure that we aren’t double-calling the API. See the <a href="#side-note-hot-vs-cold">hot versus cold</a> section for details.</p>
</div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">batcher$</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Subject</span><span class="p">();</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">cats$</span><span class="p">,</span> <span class="nx">notCats$</span><span class="p">]</span> <span class="o">=</span> <span class="nf">partition</span><span class="p">(</span>
    <span class="nx">sourceImages$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
        <span class="nf">zipWith</span><span class="p">(</span><span class="nx">batcher$</span><span class="p">),</span>
        <span class="nf">map</span><span class="p">(([</span><span class="nx">img</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nf">identifyImage</span><span class="p">(</span><span class="nx">img</span><span class="p">)),</span>
        <span class="nf">concatAll</span><span class="p">(),</span>
        <span class="nf">share</span><span class="p">()</span>  <span class="c1">// To prevent double-processing</span>
    <span class="p">),</span>
    <span class="nx">isCatImage</span>
<span class="p">);</span>
</code></pre></div></div>

<p>With the <code>cats$</code> stream, we do the same thing we’ve been doing:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cats$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="p">).</span><span class="nf">subscribe</span><span class="p">(</span><span class="nx">sendToMyPhone</span><span class="p">);</span>
</code></pre></div></div>

<p>With <code>notCats$</code>, we need to queue another image for processing on each negative value:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// No need to pass a value to next().</span>
<span class="c1">// batcher$ is just a sentinel.</span>

<span class="nx">notCats$</span><span class="p">.</span><span class="nf">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">batcher$</span><span class="p">.</span><span class="nf">next</span><span class="p">());</span>
</code></pre></div></div>

<p>Nothing will run unless <code>batcher$</code> is primed with a few <code>next()</code> calls. The initial number of calls will determine the level of parallelism. Since we need four cat images, we’ll set the parallelism to four as well:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Or, just use a for-loop!</span>

<span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="nf">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">batcher$</span><span class="p">.</span><span class="nf">next</span><span class="p">());</span>
</code></pre></div></div>

<p>The initial run will send off four API calls at once. The pipeline will maintain four in-flight API calls until one of them returns with a cat. Each cat received will effectively decrement the parallelism, preventing us from over-querying the API after we’ve already received our four cats.</p>

<div class="wide">  <figure><img src="/assets/images/2024/04/15/rxjs-batched-processing/batched.png" alt="visualization of batched pipeline processing" title="Notice how up to four parallel API calls are allowed at first. The number drops to three when the first cat is identified, then down to one when two cats are found in quick succession." /><figcaption>Notice how up to four parallel API calls are allowed at first. The number drops to three when the first cat is identified, then down to one when two cats are found in quick succession.</figcaption></figure>
</div>

<h2 id="conclusion">Conclusion</h2>

<p>Here’s the final pipeline we created:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">NUM_CATS</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">batcher$</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Subject</span><span class="p">();</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">cats$</span><span class="p">,</span> <span class="nx">notCats$</span><span class="p">]</span> <span class="o">=</span> <span class="nf">partition</span><span class="p">(</span>
    <span class="nx">sourceImages$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
        <span class="nf">zipWith</span><span class="p">(</span><span class="nx">batcher$</span><span class="p">),</span>
        <span class="nf">map</span><span class="p">(([</span><span class="nx">img</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nf">identifyImage</span><span class="p">(</span><span class="nx">img</span><span class="p">)),</span>
        <span class="nf">concatAll</span><span class="p">(),</span>
        <span class="nf">share</span><span class="p">()</span>
    <span class="p">),</span>
    <span class="nx">isCatImage</span>
<span class="p">);</span>

<span class="nx">cats$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">take</span><span class="p">(</span><span class="nx">NUM_CATS</span><span class="p">)</span>
<span class="p">).</span><span class="nf">subscribe</span><span class="p">(</span><span class="nx">sendToMyPhone</span><span class="p">);</span>

<span class="nx">notCats$</span><span class="p">.</span><span class="nf">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">batcher$</span><span class="p">.</span><span class="nf">next</span><span class="p">());</span>

<span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">NUM_CATS</span><span class="p">).</span><span class="nf">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">batcher$</span><span class="p">.</span><span class="nf">next</span><span class="p">());</span>
</code></pre></div></div>

<p>Although it got a little unweildy, this architecture does everything we wanted it to: identified and filtered a specific number of cat images out of a large input set, using parallel processing while also being frugal about extraneous API calls.</p>

<p>This simple problem statement and exercise highlights many key concepts in RxJS:</p>

<ul>
  <li>Observable streams aren’t limited to containing data. They are also useful in scheduling and behavioral control of pipelines.</li>
  <li>Cold observables are lazy, a behavior that often leads to counterintuitive results when multiple subscribers are involved. If you only want a pipeline run once, <code>share()</code> it.</li>
  <li>Pipelines don’t have “memory” on their own. Changing future behavior based on past results requires creative solutions.</li>
</ul>

<p>RxJS can be incredibly difficult to wrap one’s head around, and complicated to write.
If your team is slowed down or blocked by an exotic pipeline you wrote, I encourage you to remember: <code>for</code>-loops are perfectly acceptable.
Don’t sacrifice readability for glamor and elegance.
But when the opportunity to wrestle with RxJS does arise, I find that the satisfaction of a solid solution is worth the puzzling challenge!</p>

<p>My hope is that this little exploration satisfied your curiosity too.</p>]]></content><author><name>Neill Robson</name></author><category term="software" /><summary type="html"><![CDATA[When you have a ton of data that all needs to be processed, reactive programming makes the implementation easy to read, terse to write, and efficient to run. But when the data isn’t all needed, and processing the full stream is prohibitively expensive, more esoteric methods are necessary.]]></summary></entry><entry><title type="html">Small Group Leadership Brunch Speech</title><link href="https://neillrobson.com/blog/2024/01/18/leadership-full/" rel="alternate" type="text/html" title="Small Group Leadership Brunch Speech" /><published>2024-01-18T02:22:00+00:00</published><updated>2024-01-18T02:22:00+00:00</updated><id>https://neillrobson.com/blog/2024/01/18/leadership-full</id><content type="html" xml:base="https://neillrobson.com/blog/2024/01/18/leadership-full/"><![CDATA[<p>The following is a written draft of a speech I gave to a gathering of small group
leaders at my church several months ago. After running across the file, I felt it
might be encouraging for others to read. <!--more--></p>

<hr />

<p>One cold February evening a couple of years ago, as folks were saying their
goodbyes after small group, the leaders approached me and asked if I’d be
interested in learning to lead, as they both had other commitments and callings
taking them elsewhere over the coming months. Excited by the opportunity, I
accepted.</p>

<p>Just a few weeks later, a pandemic swept the globe,
and the small group’s meetings for the remainder of the semester were
reduced to Jack-box games on Zoom. With all the chaos, we decided to put the
group on hold for the summer and, as new leaders, we’d circle back in the fall
when things calmed down a bit.</p>

<p>As you all might recall, things didn’t calm down. For the next nine months, my
small group leadership experience was inaugurated on conference calls, many of
which were taken from the same room where my diapers were changed a quarter of a
century ago.</p>

<p>It was awkward; it was confusing; despite us all doing everything we thought was good to build community, we had
never felt more alone.</p>

<p>If you’re anything like me, you hear a story like that, and your God-given
instinct for redemption and justice says, “Wow! Those were some tough times:
clearly God was working miracles for the devil to be fighting so hard!” You’re
looking forward to me turning the page and describing transformation. “Isn’t it
such a joy going through those trials, watching Satan squirm before the
inevitable fall?”</p>

<p>I want to be transparent with you all. We talk to each other about these battles
as though every move is choreographed, every attack hits armor. But the enemy
plays dirty; the enemy isn’t ashamed to hit low; why would he do otherwise?</p>

<p>By April of 2021 I didn’t have hope. My eyes were dim, only able to see my own
life stagnating as the world—even others in the small group—seemed to move
on. I talked to Micah, handed off the leadership, and stepped away for a few
months. Even upon returning, I was a passive and hesitant member of Marshall’s
group. It was only through his unprecedented patience, encouragement, and
example that I started leading again.</p>

<p>So why do we lead? Why do I? Not every sun rises, when it comes to our own
perspective and desires. Sometimes things fall apart, and no matter who you talk
to and how much you pray, nothing tells you where you might have gone wrong.</p>

<p>I was encouraged by Lee’s sermon on Rahab last Sunday. The question stuck with
me: would Rahab’s actions have been any more or less faithful if Jericho’s
outcome were different? Surely there was a bakery in that city she loved to
visit. She never got to taste that bread again. A lively street corner, a
rooftop with a serene view of the sunset, all was wiped out—despite Rahab
doing everything in her power to live out faith in a God she had only heard
rumors of.</p>

<p>Was she content with that outcome?</p>

<p>God is a God of miracles, yes. But I often forget that God’s miracles span
generations, even millennia. Rahab became part of the earthly lineage of Jesus.
But in the moment of her walking away from the ruins of Jericho, she could not
possibly turn to that reality for comfort. But she could turn to her father, her
family, alive by her side.</p>

<p>I do not have a sublime miracle to point to that justifies the difficult times.
But I do have a conversation with a friend who was struggling with lying to a
family member, and decided to come clean. I do have the piercing and loving
advice from co-leaders, guidance that has led me through battles with anxiety
and lust.</p>

<p>They may not be big things. They may not be what we want in the next month, or
next year. But even if we never see the grand outcome in this lifetime, we can
rest knowing that God—the God who loves us, pays our debt for us—he delights
in seeing our faith. He’s writing an awesome story, spanning generations, and
he’s glad we’re taking a part in it.</p>

<p>That’s why I lead.</p>]]></content><author><name>Neill Robson</name></author><category term="personal" /><category term="spiritual" /><category term="speech" /><summary type="html"><![CDATA[The following is a written draft of a speech I gave to a gathering of small group leaders at my church several months ago. After running across the file, I felt it might be encouraging for others to read.]]></summary></entry><entry><title type="html">Invisalign of the Heart</title><link href="https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart/" rel="alternate" type="text/html" title="Invisalign of the Heart" /><published>2023-03-06T19:53:00+00:00</published><updated>2023-03-06T19:53:00+00:00</updated><id>https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart</id><content type="html" xml:base="https://neillrobson.com/blog/2023/03/06/invisalign-of-the-heart/"><![CDATA[<p>For the second time in my life, I am undergoing the tedious and painful
experience of tooth re-alignment. As a coping mechanism, why not pontificate on
how Invisalign can serve as a spiritual allegory?</p>

<!--more-->

<p>There are worse ways to cope, I suppose.</p>

<hr />

<div class="margin right">  <figure><img src="https://vkdds.com/wp-content/uploads/2020/09/invisalign-770x460-1.jpg" alt="mouth with Invisalign" title="I can't believe it's not braces!" /><figcaption>I can't believe it's not braces!</figcaption></figure>
</div>

<p>After completely forgetting the horrors of middle school braces, over the past
several years I allowed myself to lose my retainer and let my teeth slip—just
enough to warrant a few months of Invisalign to get things on the right track.
Hearing from my orthodontist the options, Invisalign seemed like an effortless
remedy for the consequences of my past neglect: transparent plastic, removable
at any time, no pain from popped wires, no eating restrictions… Life would be
great!</p>

<p>But as any teenager or adult with recent orthodontic treatment will tell you,
Invisalign is <em>not</em> a walk in the park, especially jumping into the process
“fresh” without recent braces or retainer use.</p>

<div class="margin left">  <figure><img src="https://st3.depositphotos.com/11203256/18962/v/600/depositphotos_189625402-stock-illustration-tooth-cut-medical-diagram-structure.jpg" alt="cross-section diagram of tooth" title="A misleading picture: the spongy texture of the alveolar bone is a far cry from the pain you feel when pressure is applied." /><figcaption>A misleading picture: the spongy texture of the alveolar bone is a far cry from the pain you feel when pressure is applied.</figcaption></figure>
</div>

<p>Your teeth are always slightly mobile: if not, how would they move out of
alignment in the first place? The roots sit in a container of dense cartilage,
similar to the material that shapes your nose. No matter how tough, however,
cartilage is still movable. Natural chewing, clenching, and activity will put
pressure on the teeth that allow the cartilage to shift, break down, and re-form
over the course of years.</p>

<div class="margin right">  <p>*<a href="https://www.biblegateway.com/verse/en/Song%20of%20Solomon%204%3A2">Yep, it’s biblical.</a></p>
</div>

<p>Orthodontic treatments all capitalize on this same flexibility when putting
one’s teeth back in place. They put constant pressure on the teeth to move them
in new directions, out of the way of others and into two perfect rows of
freshly-shorn sheep*. Furthermore, this pressure is applied in an extreme and
optimal way, to expedite the alignment process and overcome the natural
pressures of biting and chewing.</p>

<p>Invisalign in particular is a coveted form of treatment:</p>

<ul>
  <li>It can be removed at any time</li>
  <li>It is transparent: nearly invisible to onlookers</li>
  <li>Breakages or malfunctions do not typically cause pain (unlike popped wires
from braces)</li>
</ul>

<p>So, given all of those benefits, who am I to complain?</p>

<h2 id="im-still-going-to-complain">I’m Still Going to Complain</h2>

<p>Upon forking over the several hundred dollars for the retainer and popping it
in, I enjoyed a about five seconds of satisfaction with my purchase before the
buyer’s remorse started to kick in.</p>

<p>I first noticed how difficult it was to speak properly with this plastic in my
mouth. I suddenly had a mild and annoying lisp, a speech impediment that wasn’t
quick to disappear with a bit of practice. You can only imagine my embarrassment
at work, attempting to lead meetings about “cruthial bithnith dethithions” and
constantly apologizing for my lisp.</p>

<blockquote>
  <p>If Invisalign is supposed to be invisible, why must I preface every
conversation with an apology about their existence?</p>
</blockquote>

<p>The pain kicked in after about eight hours. The tooth aching was anticipated: I
knew that moving teeth around would create some adjustment pains. The unexpected
issue was the dreadful irritation and cutting of my gums and tongue. For nearly
a week, the flesh in my mouth revolted against the foreign plastic encasing my
teeth, becoming covered in scrapes and sores rendering even soft foods painful
to consume. In vain I acquired emery boards to sand down the “sharp” edges of
the retainer, only to realize that the edges were already perfectly smooth: my
mouth simply hated the mere presence of the equipment.</p>

<p>My lips were constantly chapped, dining was an excruciating ordeal, and my every
word reminded the whole vicinity of the new operation taking place on my teeth.</p>

<h2 id="the-second-hole-is-the-hardest">The Second Hole is the Hardest</h2>

<p>“Surely things got better after that first adjustment period! Folks wear these
for several years: it can’t be that bad!”</p>

<p>Yes, the initial pain did recede after that first week. My lisp was no longer
noticeable, my tongue learned not to scrape against the plastic, and my jaw
adjusted to this new pressure.</p>

<p>However, I still looked upon the procedure with a fair amount of antipathy. The
pain was gone, but my lifestyle was still significantly impacted.</p>

<p>You can eat or drink <em>nothing but water</em> when your equipment is in. Nothing else
is acceptable, even sparkling water. For every meal, snack, or drink, at home or
on the road, for fuel or for social occasions, you must remove your Invisalign
with clean hands and stow it in your case. By consequence, you must also carry
your case everywhere—unless you want to wrap your retainer in bathroom paper
towels and leave them out on the table with you.</p>

<p>When is the last time a tin of chewing tobacco bulging out of your pocket was in
style? Yeah, I can’t remember either.</p>

<p>You may counter, “but at least you have the flexibility to remove it whenever
you want!” Ah, but the small print in the contract says otherwise: Invisalign
must remain in your mouth <strong>for 22 hours a day</strong> in order to be effective. Yep,
you read that right.</p>

<p>“Ah, but two hours across three meals, that’s 40 minutes a meal, you’re fine!”</p>

<p>How many people do you know that only eat at mealtimes, consuming nothing but
pure water at all other points of the day? No snacks, no coffee or tea, no
Friday-evening happy hour with friends. Especially when considering someone with
a fairly active lifestyle, you simply can’t nourish yourself appropriately
getting all of your calories in just three meals.</p>

<p>And remember, every single time you remove and replace your Invisalign, you must
first clean your teeth of any food or plaque that has built up as a result of
your indulgence. Twice-a-day dental hygiene doesn’t cut it anymore, because the
plastic barrier around your teeth prevents your saliva and tongue from doing
their natural, gradual decomposition and cleanup of lingering food. You’re
pressing all of that stuff directly against your enamel otherwise.</p>

<hr />

<p>So I looked at the life I had made for myself, and felt thoroughly disappointed.
In the evenings I’d inspect my teeth, compare them to Reddit horror stories, and
think to myself, “I’m really not that bad off! There’s one bottom front tooth
that’s slightly out of alignment. Do I really need to spend hundreds of dollars
to move it back? Not to mention the hours of time and mental effort it takes to
maintain this practice. No one sees that tooth when I smile. It’s not causing
any toothaches. Why not just get a nighttime retainer and call it a day?”</p>

<p>It struck me, as I was making these compromises with myself, how much my
petulance sounded like the complaints I’d often express to God during rough
patches in other areas of my life. In fact, almost everything about Invisalign
seemed quite apropos to compare with the circumstances God uses to grow us.</p>

<h2 id="invisalign-of-the-heart">Invisalign of the Heart</h2>

<blockquote>
  <p>God, create a clean heart for me
and renew a steadfast spirit within me.</p>

  <p>– Psalm 51:10</p>
</blockquote>

<p>It’s a lovely prayer. We recognize the depth of our own transgression, our lack
of alignment with God, and we say, “I’m sorry! Please forgive and repair me!”
Or, perhaps there was no acute wrongdoing, but we see things in our walks with
God that could be better, and we ask him to work in us and transform us into his
image.</p>

<div class="margin left">  <figure><img src="https://www.praise.com/wp-content/uploads/6.09-scaled.jpg" alt="water running through cupped hands" title="Does living water stain Invisalign? 🤔" /><figcaption>Does living water stain Invisalign? 🤔</figcaption></figure>
</div>

<p>Cool! God gladly accepts our request for redemption and sanctification. He
crafts a nifty little plastic mold that is <em>almost</em> the same shape as our heart,
slaps it in place, and says “For best results, wear it for a minimum of 24 hours
per day.”</p>

<p>We’re excited for about five seconds. Then we try to do some of the most basic
things that used to fill our lives (speak! eat!), and find that everything has
become unnatural, uncomfortable. All of our old activities now have this ball
and chain tied to them.</p>

<p>Just like Invisalign, sanctification is not often seen or recognized by our
peers, yet it is a constant presence (dare I say, inconvenience) in our own
lives. Folks notice the side effects: for Invisalign, “where did that lisp
come from?” or, “are you on a new diet?” and for sanctification, “you used to be
much funnier! Relax!” or, “remind me again when you became a sober curmudgeon?”</p>

<p>You just can’t stand having it on all day, so you take it off once in a while
for relief from the discomfort. Looking at your heart, you start thinking, “what
the heck? It’s not really that bad! Certainly not as rough as some folks I see
on Reddit. This whole process isn’t even necessary. I’m wasting my time and
mental health over petty details: let me just be satisfied with who I was.”</p>

<p>Watching your heart hour by hour, and day by day, you feel the pain but you
don’t see any improvement at all. You still feel drawn to all of your old
life—even more so, now that the habits are in the spotlight with this new
procedure—and the aligner is only causing unnecessary pain.</p>

<div class="margin right">  <figure><img src="https://cdn.mos.cms.futurecdn.net/wtGrJj5YzeaNdyCzaurDPe-1200-80.jpg" alt="soft-body Tetris game" title="Soft-body Tetris: as if normal Tetris wasn't infuriating enough." /><figcaption>Soft-body Tetris: as if normal Tetris wasn't infuriating enough.</figcaption></figure>
</div>

<p>At regular intervals, God shows up with a new alignment mold for you to wear.
Oftentimes, it pushes against portions of your heart that seem completely
unrelated to the task at hand. It seems that he’s never just satisfied with a
surgical fix of the one issue you originally asked about. He’s playing some
divine game of seven-dimensional Tetris with the pieces of your heart, with an
ostensible disregard for even a bit of your own comfort.</p>

<p>But God reminds you that this process was never promised to be easy. It would
come with plenty of pain, much of which you wouldn’t understand in the moment.
It’s a long-term commitment—a commitment of a lifetime—and requires patience
and perseverance, even when progress seems slow or you find yourself
backsliding. The adjustments being made are numerous, diverse, and tiny: every
one of them serves a purpose, even if you can’t see their significance in the
moment (or even see the impact at all). Faithfulness and trusting the story will
result in a better version of yourself, though: a version closer to the divine
image in which you were created, closer to the God whose faithful love has
opened a door for you to enjoy an eternal relationship with him.</p>

<hr />

<p>God never forces the issue: just like it was your choice to start the treatment,
you can always say “enough” and throw away the aligner. Who knows: maybe you’ve
learned enough good habits at that point to keep your heart healthy for a couple
weeks, or a month or two. I know from experience: it feels pretty good to walk
around with nothing “bothering” my teeth or soul.</p>

<p>But I also know that freedom only lasts for so long. If God isn’t straightening
my heart (or the aligner isn’t straightening my teeth), the world has plenty of
pressures that take me any number of different directions.</p>

<p>Now, is my orthodontist God? Certainly not! Nor do I think I’ll be making
transformative spiritual changes based on this little analogy. But, at the very
least, it has given me a bit more strength to continue wearing these darn
plastic sheets in my mouth!</p>]]></content><author><name>Neill Robson</name></author><category term="personal" /><category term="spiritual" /><summary type="html"><![CDATA[For the second time in my life, I am undergoing the tedious and painful experience of tooth re-alignment. As a coping mechanism, why not pontificate on how Invisalign can serve as a spiritual allegory?]]></summary></entry><entry><title type="html">Typescript’s Skeleton Key</title><link href="https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/" rel="alternate" type="text/html" title="Typescript’s Skeleton Key" /><published>2022-11-01T13:38:00+00:00</published><updated>2022-11-01T13:38:00+00:00</updated><id>https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key</id><content type="html" xml:base="https://neillrobson.com/blog/2022/11/01/typescripts-skeleton-key/"><![CDATA[<p>The intrepid Typescript developer will find several types that, frankly, make no sense whatsoever in real life. A “string” or “number” is perfectly reasonable, but what is an “unknown” or “never” type?</p>

<p>More importantly, what in the world is a “keyof never”?</p>

<!--more-->

<div class="margin right">  <p>In case the introduction didn’t make the fact clear, this post will be pretty technical. Be forewarned!</p>
</div>

<p>First, we’ll need a bit of background on how types can be combined in Typescript to create new, more complicated types. The rules take after formal logic and set theory, but the end result is still pretty intuitive.</p>

<p>Let’s pretend we have two plain object types, <code>Vehicle</code> and <code>Animal</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Vehicle</span> <span class="p">{</span>
    <span class="nl">speed</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
    <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">legs</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="union">Union</h2>

<p>Perhaps we also want a function that accepts either a <code>Vehicle</code> or <code>Animal</code> and returns its name. How would we write that function and its signature?</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">getName</span><span class="p">(</span><span class="nx">entity</span><span class="p">:</span> <span class="nx">Vehicle</span> <span class="o">|</span> <span class="nx">Animal</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">entity</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Notice a few things about this function:</p>

<ul>
  <li>
    <p>The parameter can either be a <code>Vehicle</code> or <code>Animal</code>, <em>but not both</em>. In other words, if you pass in something that has a name <em>and</em> speed <em>and</em> legs, you’ll get an error.</p>
  </li>
  <li>
    <p>Because the object can only be one or the other type, the only property that is guaranteed to exist on the object is <code>name</code>. If we tried to access any other property on the object (without additional typecasting or narrowing), again, we’d get an error.</p>
  </li>
</ul>

<p>The <strong>union</strong> type operator <code>|</code> is used when we want instances that are exactly one of the component types specified.</p>

<h2 id="intersection">Intersection</h2>

<p>Now, we could also have an object (one that is currently untyped) called “horse”:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">horse</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">speed</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span>
    <span class="na">legs</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Spirit</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The horse is both a <code>Vehicle</code> and an <code>Animal</code>, because it literally has all of the fields necessary for both types. We can declare that using the following syntax:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Steed</span> <span class="o">=</span> <span class="nx">Vehicle</span> <span class="o">&amp;</span> <span class="nx">Animal</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">horse</span><span class="p">:</span> <span class="nx">Steed</span><span class="p">;</span>
</code></pre></div></div>

<p>A <code>Steed</code> can be passed into the <code>getName</code> function, and indeed, it can be used anywhere anyone asks for just a <code>Vehicle</code>, or just an <code>Animal</code>, because a <code>Steed</code> is truly both. That said, any variable defined as a <code>Steed</code> must have all the fields of both component types: we couldn’t assign “just” an <code>Animal</code> to a variable of the <code>Steed</code> type.</p>

<p>The <strong>intersection</strong> type operator <code>&amp;</code> is used when we want instances that can serve as <em>any</em> of the component types specified at <em>all</em> times.</p>

<h2 id="unknown-and-never">Unknown and Never</h2>

<p>Among Typescript’s special-case built-in types are two polar opposites, <code>unknown</code> and <code>never</code>. What do those types mean?</p>

<p>If a variable is an <code>unknown</code> type, then you can assign any value to it. <em>Anything. Always.</em> Likewise, a variable with a <code>never</code> type can not have anything assigned to it. <em>Nothing. At all.</em></p>

<p>The cases where you’d use either of these types are somewhat esoteric, and I won’t make a comprehensive list here. However, here are a few simpler motivating examples:</p>

<ul>
  <li>
    <p>A function that never returns (e.g. always throws an error or goes into an infinite loop) has a return type of, you guessed it, <code>never</code>. This signature is different from a return type of <code>void</code>, i.e. when the function does call <code>return;</code> with no value.</p>
  </li>
  <li>
    <p>A function parameter that could be a variety of things, determined through conditional checks (e.g. <code>if (param === undefined)</code>), could have a type of <code>unknown</code> if we were too lazy to create a more specific type.</p>
  </li>
</ul>

<h3 id="relation-to-set-theory">Relation to Set Theory</h3>

<p>How might we define <code>unknown</code> and <code>never</code> with our union and intersection operators? They would both be infinite sets—impractical to write explicitly in code—but the thought exercise will help us understand some interactions described later in this post.</p>

<p>The easier type to conceptualize this way is <code>unknown</code>. Consider: if we want the ability to assign any of three different types to a variable, what syntax would we use? Based on our <code>getName</code> function parameter, we’d do something like <code>A | B | C</code>. For five different types, we’d have <code>A | B | C | D | E</code>… and for truly <em>any type at all</em>, we’d have an infinitely-long union of types.</p>

<p>The more difficult type to discern in this way is <code>never</code>—although, given the parallels so far, the reader might be able to guess where we’re going. When we defined <code>Steed</code> as <code>Vehicle &amp; Animal</code>, we could no longer assign <code>Vehicle</code> or <code>Animal</code> alone to variables of that type. Furthermore, if we created a longer “intersection type” <code>A &amp; B &amp; C</code>, with more components, we’d get an increasingly restricted type. It follows that a variable with an infinitely-long intersection type could <em>never</em> take a value, because no value would have all the properties required of the type.</p>

<p>So, in summary: <code>unknown</code> is an infinite union of types; <code>never</code> is an infinite intersection of types.</p>

<h2 id="the-keyof-utility">The “keyof” Utility</h2>

<p>This little operator has a pretty simple use: it creates a type consisting of a <em>union</em> of the possible keys for an object.</p>

<p>Some code is worth a thousand words:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">legs</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Equivalent to ('name' | 'legs')</span>
<span class="kd">type</span> <span class="nx">AnimalKey</span> <span class="o">=</span> <span class="kr">keyof</span> <span class="nx">Animal</span><span class="p">;</span>
</code></pre></div></div>

<p>The union won’t always just be of strings, either: an array (for example) could yield numeric keys in that union.</p>

<h2 id="keyof-with-unions-and-intersections"><code>keyof</code> with Unions and Intersections</h2>

<p>Think of our old example types of <code>Vehicle</code>, <code>Animal</code>, and <code>Steed</code>. How would <code>keyof</code> behave with the union and intersection operators?</p>

<ul>
  <li>
    <p><code>keyof (Vehicle | Animal)</code> would only yield <code>'name'</code>. Does that feel a bit odd? Remember, <code>Vehicle | Animal</code> means that each value can only be one or the other type at any given time. When we apply <code>keyof</code>, the only guaranteed key on the object is the one shared between both types. That’s also why our function <code>getName</code> was restricted to referencing the <code>name</code> property.</p>
  </li>
  <li>
    <p><code>keyof Steed</code> (i.e. <code>keyof (Vehicle &amp; Animal)</code>) would naturally yield all three keys, <code>'name' | 'speed' | 'legs'</code>.</p>
  </li>
</ul>

<p>A union type typically <em>decreases</em> the number of valid keys, while an intersection type typically <em>increases</em> the number of valid keys.</p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>We have enough information now to consider the original question: What is <code>keyof never</code>? Or <code>keyof unknown</code>? The answer, while unintuitive, is quite logical!</p>

<p>Let’s start again with <code>unknown</code>:</p>

<ul>
  <li>
    <p><code>unknown</code> is an infinite union of types</p>
  </li>
  <li>
    <p>a union type typically decreases the number of valid keys</p>
  </li>
  <li>
    <p><code>keyof unknown</code> is an infinitely-shrunk set of keys, i.e. an empty set</p>
  </li>
</ul>

<p>The set theory explanation is still confusing, so think about it on a natural-language level. What property is valid for both Vehicles, and Animals, and Reports, and Electrons, and Arrays, and Numbers, and Strings, and anything else you can think of? True, a variable of type <code>unknown</code> will only ever be one of those actual types at any given time, but (as we saw in the <code>getName</code> function) we are only allowed to use keys that are shared across all possible types. The question we’re answering with <code>keyof unknown</code> is “what keys can be used at any time on values of any type anywhere in Typescript?”</p>

<blockquote>
  <p>Therefore, <code>keyof unknown</code> is <code>never</code>.</p>
</blockquote>

<p>What about <code>keyof never</code>?</p>

<ul>
  <li>
    <p><code>never</code> is an infinite intersection of types</p>
  </li>
  <li>
    <p>an intersection type typically increases the number of valid keys</p>
  </li>
  <li>
    <p><code>keyof never</code> is the maximal set of keys possible in Typescript, i.e. <code>String | Number | Symbol</code></p>
  </li>
</ul>

<p>When we combined two types, we got a type that had all the keys of both component types—even though we could no longer <em>assign</em> values of either component type to the intersection type. As we continue expanding that intersection type, we cover more and more keys, while making it more and more difficult to assign any value to the type… until we reach <code>never</code>. The question we’re answering with <code>keyof never</code> is “what keys could possibly, at some point, be syntactically valid in Typescript?”</p>

<blockquote>
  <p>Therefore, <code>keyof never</code> is <code>String | Number | Symbol</code>.</p>
</blockquote>

<h2 id="why-do-we-even-need-this">Why do we even need this?</h2>

<p>Admittedly, it’s mostly a fun thought exercise for me! But there is some marginal benefit.</p>

<p>If you are trying to define a variant of the <code>Record</code> type and want to provide no restrictions on what keys are used, you can use the generic type <code>K extends keyof never</code> to ensure that all valid key types are allowed (and, at the same time, preventing syntactically invalid key types). Granted, you could also use the more explicit <code>String | Number | Symbol</code>, and you’d be 99.9% sure to cover everything. However, if the language ever evolves in the future to allow a wider (or—somehow—narrower) set of key types, <code>keyof never</code> would by definition pick up on the change immediately, with no intervention necessary from the developer.</p>

<p>Crucially, I must urge the reader to not take this rationalization to their supervisors and tech leads in an attempt to justify unreadable code. The vast majority of developers will find it much easier to understand <code>String | Number | Symbol</code>. Saving that value in a readily-accessible type alias, with an explanatory code comment, is arguably much more maintainable than throwing <code>keyof never</code> everywhere. However, for those occasions when you see the latter in a codebase, and you’re confused as to how in the world that skeleton key works, think back to set theory. You just might be able to put yourself back on track!</p>]]></content><author><name>Neill Robson</name></author><category term="software" /><summary type="html"><![CDATA[The intrepid Typescript developer will find several types that, frankly, make no sense whatsoever in real life. A “string” or “number” is perfectly reasonable, but what is an “unknown” or “never” type? More importantly, what in the world is a “keyof never”?]]></summary></entry><entry><title type="html">Grad School Like I’m Five: Buffer Overflow</title><link href="https://neillrobson.com/blog/2020/11/23/grad-school-like-im-five/" rel="alternate" type="text/html" title="Grad School Like I’m Five: Buffer Overflow" /><published>2020-11-23T20:25:00+00:00</published><updated>2020-11-23T20:25:00+00:00</updated><id>https://neillrobson.com/blog/2020/11/23/grad-school-like-im-five</id><content type="html" xml:base="https://neillrobson.com/blog/2020/11/23/grad-school-like-im-five/"><![CDATA[<p>According to <a href="https://github.com">GitHub</a>, I’ve written approximately 6,000 lines of code over the course of the past four months (welcome to grad school!).
The question is, can I explain all of the stuff I wrote? <!--more-->
Over the next few blog posts, I’ll be trying to present a high-level overview of some of the most interesting concepts that I’ve learned this past semester.</p>

<p>How high-level, you ask?</p>

<p>The goal is to explain these concepts to a five-year-old.</p>

<p>Not only will this audience choice keep these blog posts short and sweet, it will also help me reassure myself that the boatloads of information I consumed throughout this semester did not simply fall out of my other ear!
And, of course, I hope that you, the reader, find these snippets more entertaining to read than your average textbook chapter.</p>

<p>For this inaugural episode, we will cover… <strong>Buffer Overflow</strong>!</p>

<h1 id="the-problem">The Problem</h1>

<p>Imagine we’re sitting across from each other, with an empty table between us.
The tabletop is wiped so clean, you can see the reflection of the overhead light in the white plastic.
I give you a crayon, and I ask you to draw a cat.
What do you do?
If you’re following my instructions, you’ll probably start drawing a cat directly on the table.
If I’m a self-respecting grown-up, I’ll probably respond by scolding you for drawing on furniture.
But you were only doing what you were told to do!
Grown-ups are so unfair, am I right?</p>

<p>Okay, I’ll give you a piece of paper: unlined and white, a blank slate for your work of art.
I set it down in front of you, and ask you once again to draw a cat.
And you do!
It’s a cool cat that you draw, and I’m impressed, so I ask you to draw another.
And another.
And another.</p>

<figure><img src="https://pics.me.me/hey-girl-isaw-you-coloring-inside-the-linesearlierandivejust-gotto-say-7937983.png" alt="Elementary-aged boy uttering a pickup line to girl" /></figure>

<p>After a while, you mention how tired you are, and ask to go play with friends for a while.
Happy with your work, I allow you to go, and I reach down to grab the paper with your fantastic cat drawings.
There’s only one problem…</p>

<figure><img src="https://www.kenarry.com/wp-content/uploads/2014/09/how-to-get-dry-erase-marker-off-the-wall2.webp" alt="Whiteboard with dry erase markings on the wall" title="Mom's face when she sees you've crossed the line" /><figcaption>Mom's face when she sees you've crossed the line</figcaption></figure>

<p>You’ve drawn so many cats that you ran out of space on the paper and got markings on the table once again.
With white paper on a white plastic table, who’s to blame you for overstepping those boundaries?</p>

<p>In a similar way, computers have a large table on which they can write and draw.
Usually, someone like you and me will lay down pieces of paper for the computer, so that when it draws cats for the cat-drawing program, those cats won’t end up on the table or on anyone else’s paper sitting nearby.
But the computer can’t tell the difference between your paper, my paper, its paper, or the table, so unless we are <em>very</em> specific about the size of what we tell it to draw, it has no problem drawing all over everyone else’s work.</p>

<p>Not good.</p>

<p>On top of that, most people give computers enormous amounts of instructions in advance.
Although I just told you to draw one cat at a time (maybe ten cats in all), professional computer people get paid lots of money to tell computers to draw <em>billions</em> of cats at once in the fastest way possible.
It’s like your math teacher writing up a billion-problem multiplication drill the night before, handing it to you the next morning, and leaving.</p>

<figure><img src="https://www.1989generationinitiative.org/j/2020/07/times-table-worksheets-activity-shelter-multiplication-drill-counting-money-kindergarten.jpg" alt="five-minute multiplication drill" /></figure>

<p>There’s no way to know in advance if you’ll write beyond the lines at some point in that greuling process!</p>

<h1 id="the-solution-">The Solution (?)</h1>

<p>So after cleaning the poor table of all your crayon marks, I decide to fix the problem by using a new type of paper.
This paper, rather than being pure white, has a thick red border around the edges.
We’ll call this border the “red zone.”
Now, when you’re drawing, I can see when your crayon hits the red zone, and choose to change my instructions to you so that you don’t venture beyond that zone.
(Of course, you could also use that red zone to guide yourself, but computers aren’t as smart as you are.)</p>

<p>In a similar way, I can mark certain edges in the computer’s table (we call that table “memory” in the computer) as dangerous regions (red zones).
Whenever a computer tries to write anything on that zone, the programmer can be notified and jump in to change the instructions (the “program”) so that the computer doesn’t venture past that edge any longer.</p>

<figure><img src="https://www.simplemost.com/wp-content/uploads/2017/02/7275464206_72432c61cd_o_sidewalk-bumps.jpg" alt="Child stepping on sidewalk bumps" title="We have &quot;red zones&quot; in real life too. Sometimes they're other colors, like yellow." /><figcaption>We have "red zones" in real life too. Sometimes they're other colors, like yellow.</figcaption></figure>

<p>No one should be fooled that this strategy solves all of our problems, though.
The red zone is not <em>preventing</em> our computer from drawing outside its region—only warning us of its error.
Furthermore, I could easily instruct the computer (or you!) to draw something “new” far outside the bounds of the paper.
For example, say I want you to draw a cloud in the sky above the various cats.
In that case, you could draw that entire cloud without ever touching the red zone that I’ve designated.
When I’m watching you, it’s easy to spot the error, but again, remember that most big-shot computer programmers send in tasks like billion-question multiplication quizzes in advance.
They don’t bother to watch every calculation, but rely on looking at the red zone after the fact to see if their instructions need to be edited.</p>

<p>I could make larger red zones to catch more of these over-steps, but if I make the red zone too big, then no one would be able to draw anything <em>outside</em> of the massive red zone!</p>

<hr />

<p>So that’s buffer overflows and red zones in a nutshell.</p>

<p>Those over the age of five might be interested in the open-source tool that I used during my studies to implement a red-zone-based buffer overflow detector.
If so, definitely check out the <a href="https://dynamorio.org/">DynamoRIO</a> runtime code manipulation system and the <a href="https://github.com/Xuhpclab/DrCCTProf">DrCCTProf</a> call path profiling tool built atop DynamoRIO.
I cannot yet release my own code to the public for viewing, as grades for the class are still being calculated, but pending the professor’s permission I will definitely update this blog post with links for interested parties!</p>

<p>I hope you found this little explanation entertaining and informational.</p>]]></content><author><name>neill</name></author><category term="college" /><category term="software" /><summary type="html"><![CDATA[According to GitHub, I’ve written approximately 6,000 lines of code over the course of the past four months (welcome to grad school!). The question is, can I explain all of the stuff I wrote?]]></summary></entry><entry><title type="html">Book Review: The Circle, by Dave Eggers</title><link href="https://neillrobson.com/blog/2018/02/24/book-review-the-circle-by-dave-eggers/" rel="alternate" type="text/html" title="Book Review: The Circle, by Dave Eggers" /><published>2018-02-24T15:13:00+00:00</published><updated>2018-02-24T15:13:00+00:00</updated><id>https://neillrobson.com/blog/2018/02/24/book-review-the-circle-by-dave-eggers</id><content type="html" xml:base="https://neillrobson.com/blog/2018/02/24/book-review-the-circle-by-dave-eggers/"><![CDATA[<p>For the first time I can remember in a long while, I did not have the endurance to make it through a book. <em>The Circle</em> was patronizing, immature, and (as others have already mentioned) offered nothing new to the conversation. <!--more--> Halfway through the book, I could not recall a single plot development that could not be recreated precisely (often down to the phrasing of the words) from current news or social media. Some speculative literature provides an insightful reflection on human nature; others grant an escape from the world’s worries; Eggers manages to to neither in his work, using such an explicit and leaden pen that one might draw parallels to reading one’s own social media feed.</p>

<p>The third-person limited point of view tries desperately to inspire the reader’s empathy towards the protagonist, but the narrative thrashes between vapid predictability and deplorable decision-making. Typically, a character’s weaknesses and vulnerabilities evoke some measure of compassion from the audience, but I found no such sympathy for a protagonist so passive and malleable to her own surroundings.</p>

<p>Far from edifying or subtly cautionary, the mature content smacked of pretentious gossip and schoolboy fantasies. Was Eggers’s intention to copy the fatuous desires and half-baked relationships of modern society to further condemn the digital age? He only managed to add a veneer of erotic language to lessons that anyone mature enough to read his book could glean just as easily from turning on the television.</p>

<p>In submission, the portion of this book that I forced down my gullet did resonate with my own past experience. The fears and fascinations, challenges and trials that the fictional community faces are present with glaring radiance in my history, and I am by no means worthy of denouncing the lifestyle that this book attempts to critique. But if <em>The Circle</em> wanted to be a parable, it failed miserably: those of us who would benefit from the perspective this book attempts to provide would more likely find the reading experience an act of navel-gazing, while those capable of gleaning the moral by and large have already discovered it from reflection and experience.</p>

<p>Maybe I did not represent the intended audience for Eggers, but to dismiss oneself as inappropriate to judge a work that one found repulsive is a self-pitying cop-out. Dave, I want to receive the message you are trying to express, but please instruct me as an adult would exhort an ignorant child: the sources from which I can revel in darkness with fellow miscreants are, as you say, already far to prevalent.</p>

<hr />

<p>Have you read the book? Watched the movie? (I haven’t yet… should I?) Whether you loved it, hated it, or fall anywhere in between, I would enjoy hearing your opinions in the comments below!</p>]]></content><author><name>Neill Robson</name></author><category term="literature" /><category term="personal" /><summary type="html"><![CDATA[For the first time I can remember in a long while, I did not have the endurance to make it through a book. The Circle was patronizing, immature, and (as others have already mentioned) offered nothing new to the conversation.]]></summary></entry><entry><title type="html">The Infamous Liebster Award</title><link href="https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/" rel="alternate" type="text/html" title="The Infamous Liebster Award" /><published>2018-01-28T19:30:00+00:00</published><updated>2018-01-28T19:30:00+00:00</updated><id>https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award</id><content type="html" xml:base="https://neillrobson.com/blog/2018/01/28/the-infamous-liebster-award/"><![CDATA[<p>As an encouragement to continue sharing my thoughts and experiences online, a person near and dear to my heart nominated me for <a href="https://theglobalaussie.com/liebster-award-2018/">the Liebster Award</a>.</p>

<!--more-->

<figure><img src="https://theglobalaussie.com/wp-content/uploads/2017/12/More-Flowers.png" alt="Liebster Award Logo" /></figure>

<p>First and foremost, I highly recommend that you check out the blog of my nominator, <a href="https://volarconmigo.wordpress.com/2018/01/07/liebster-award/">Further Up and Further In</a> by La Creadora Fantasma. Like myself, LCF is just beginning to learn how to record her own thoughts and inspire others through online publishing, and I am eager to watch her blossom both professionally and creatively through this experience. Keep it up!</p>

<p>As it turns out, the “rules” of nomination for the Liebster Award are slightly different from year to year: since 2018 just recently kicked off its opening act, I’ll try and satisfy both the rules given to me by my nominator and the new rules published by the originator. The links to both rulesets are given above.</p>

<p>Let’s go!</p>

<h2 id="intention-explained">Intention Explained</h2>

<p>Why do I write blogs?</p>

<p>My journey began when I took a trip abroad to Hangzhou, China, and was seeking a way to memorialize that unique experience and share it with friends and family back home. Being a quixotic techie with a dogged proclivity toward independence, I threw together a self-hosted website on which I built a resume page in spartan HTML/CSS and a <a href="https://ghost.org/">Ghost blog</a> for recording my time in China. Since then, I’ve spent much more time investing in the website’s technology rather than its content (form over function–an incorrigible flaw against which I battle), and have most recently settled on a <a href="https://jekyllrb.com/">Jekyll site</a> hosted on <a href="https://github.com/">Github</a> (a platform to help software developers track their code and collaborate) and managed with <a href="http://prose.io/">Prose</a>.</p>

<figure><img src="/assets/images/2018/01/the-infamous-liebster-award/jekyll.png" alt="Github and Jekyll" title="Jekyll static website generator, plus Github Pages hosting: A match made in an evil genius's lab." /><figcaption>Jekyll static website generator, plus Github Pages hosting: A match made in an evil genius's lab.</figcaption></figure>

<p>But, technologies aside, why do I still strive to immortalize my thoughts in text, and publish them online for the world to see? In truth, my motivation comes down to my love for storytelling: using narratives in every form to build connections with others. From the color palletes of the websites I build to the tension of the piano’s vibrations, from the worlds invented through extemporized theatrical performance to the themes shared through a video game, I am in love with communication–especially through non-traditional media. Building a website and contribuing to a blog is one way I believe that I can combine my two somewhat divergent passions–software development and narrative creation–into a single product.</p>

<p>I also like being able to save and revise drafts of my thoughts: a practice that most other forms of online social media don’t necessarily allow!</p>

<h2 id="questions-answered">Questions Answered</h2>

<p>I will now attempt to answer the eleven inquiries of my nominator, La Creadora Fantasma:</p>

<ol>
  <li>
    <p>Apple, Android, Microsoft, or Linux software?</p>

    <p>You’re killing me already! My knee-jerk response is Linux, because I’ve grown up using various Linux distributions for most of my journey so far as a computer scientist and I value the power and freedom of a community in which everyone is able to contribute to the functional development of the software system.</p>

    <p>That said, as I continue to grow in my understanding of various computer technologies, companies, and cultures, I am also beginning to take into account the pragmatic realities of the field. “Open Source” does not necessarily imply an open and inclusive development community. It doesn’t always yield accessible software, and the provided products and services often fail to bring food to the table of their contributors. There is a time for everything, and a season for every activity under the heavens<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>; free and open-source software has an important place in our community, but it is not the answer to all technological woes.</p>

    <p>From a practical perspective, I actually find myself leaning slightly toward Microsoft. Although I am perhaps least familiar with system administration and software development on Windows, I find Microsoft’s recent actions as a company pleasantly surprising and admirable. They seem eager to make their products accessible and open both to developers (who desire clear documentation and transparent sources) and end users (who desire dependability and elegant functionality). Microsoft doesn’t exhibit the vertical integration of their products and services that Apple does (allowing Apple to provide beautiful interfaces to their customers), but in relaxing their hold on the reins, Microsoft forms better relationships with their developer community. Microsoft still keeps much of their software closed-source, but without doing so they would struggle to make ends meet in order to deliver the high-quality services that end users have come to expect.</p>

    <figure><img src="/assets/images/2018/01/the-infamous-liebster-award/Microsoft-logo_rgb_c-gray.png" alt="Microsoft logo circa 2018" title="A pretty (flat) logo" /><figcaption>A pretty (flat) logo</figcaption></figure>

    <p>So, long story short: In a perfect world, Linux. In this world, Microsoft!</p>
  </li>
  <li>
    <p>If you could play any instrument (other than one you already play), what would it be?</p>

    <p>I would definitely choose an instrument that I could carry with me, and perferrably one with which I could sing along. A guitar, despite its simplicity, would be ideal for these requirements! But since portability is more important to me than the ability to sing, I would also seriously consider a harmonica, because it could be a meditation and respite that could literally fit in my pocket.</p>
  </li>
  <li>
    <p>Herbal, green, black, or white tea?</p>

    <p>I think I’ll have to go with the only choice on the list that isn’t, biologically speaking, tea: the variety of potentials in herbal drinks are what cause me to choose them as my favorite. Of course, one can create concoctions of tea leaves infused with herbs and spices as well, making herbal drinks a perfectly valid option on the list, although I suppose the choice is a bit of a cop-out response as I’m defining it to encompass every other option.</p>

    <p>If I had to choose a type of tea leaf, I would probably choose green tea, because of my lovely experience with Longjing tea in Hangzhou, Zhejiang, China (which you can read more about <a href="/blog/2016/06/15/the-tea/">here</a>).</p>
  </li>
  <li>
    <p>What was your favorite song as a small kid?</p>

    <p>I don’t remember having a single favorite song. However, there were several songs that stood out as hallmarks of my musical “coming-of-age”:</p>

    <p>The first song I remember falling in love with as a performance piece (on the piano) was <a href="https://www.youtube.com/watch?v=d020hcWA_Wg">Clocks by Coldplay</a>.</p>

    <p>The first song I ever purchased was <a href="https://www.youtube.com/watch?v=Y6ljFaKRTrI">Still Alive by Jonathan Coulton</a>. I also ended up parodying this song as a goodbye gift for the music teacher who directed the theatre production that was pivotal in maturing me emotionally and socially.</p>

    <figure><img src="/assets/images/2018/01/the-infamous-liebster-award/chell.jpg" alt="The protagonist of Portal" title="Fan art of Portal--the video game in which Jonathan Coulton's song was featured" /><figcaption>Fan art of Portal--the video game in which Jonathan Coulton's song was featured</figcaption></figure>

    <p>Speaking of that show, I am quite fond of several songs in the soundtrack of <a href="https://www.youtube.com/playlist?list=PLnbBAvpTGon8EN_eh_zALsb7dxPy-ttnd">HONK Jr</a>.</p>

    <p>The first song I ever performed for a romantic interest was <a href="https://www.youtube.com/watch?v=gynYtBmYlnk">The Pout-Pout Fish</a>.</p>

    <p>And by far the most important, this song has grown up with me since elementary school as a vivid reminder of God’s relationship with me. Even as an adult it brings tears to my eyes remembering all the situations God carried me through with <a href="https://www.youtube.com/watch?v=cROXxgPMzHA">this song</a> in my mind.</p>
  </li>
  <li>
    <p>What is the best joke you’ve ever heard?</p>

    <blockquote>
      <p>I hate telling puns to kleptomaniacs; they always take things literally.</p>
    </blockquote>
  </li>
  <li>
    <p>Do you know what a viola is?</p>

    <p>Yeah… Isn’t it a string instrument that specializes in producing tones between the ranges of a violin and cello? I’m purposely not going to look up whether I’m right or not to preserve the innocence of my potentially incorrect and offensive answer.</p>

    <figure><img src="/assets/images/2018/01/the-infamous-liebster-award/viola.jpg" alt="viola" title="Something like this, I think" /><figcaption>Something like this, I think</figcaption></figure>
  </li>
  <li>
    <p>Have you ever been out of the country? If so, where?</p>

    <p>I’ve been to China (Shameless plug! Read more about the experience on this blog!) and the Caribbean. I would only consider the former experience to be true “cultural immersion,” as the trip to the Caribbean was simply a week-long vacation to a beautiful (but somewhat isolated) resort. It was a wonderful experience nonetheless!</p>
  </li>
  <li>
    <p>What are some inside family quotes that you’ll never forget?</p>

    <p>In my younger and more self-conscious years, I hated the word “play” when it came to my social interactions with friends. My dad would sometimes reference a “play date” in which I participated, or asked if I would invite some classmates over to “play” after I finished my homework. My answer was invariably, “No! It isn’t called ‘playing’! It’s ‘hanging out’!”</p>

    <p>Well, my dad took a while to get the picture, but he somehow found the compassion and patience to accept my ridicules and attempt to change his perfectly appropriate vocabulary. Bless his heart; that pursuit had deleterious consequences.</p>

    <p>One evening, as a friend and I were enjoying dinner, I asked my dad if my friend could just stay overnight so we could have more time together. Eager to encourage my social interactions (of which I did not have many), my dad readily called up my friend’s parents to organize the evening. “Hi Rick,” he began. “This is Forrest, Neill’s dad. I was wondering if you would be willing– uh, I mean, could Jacob and Neill have a–”</p>

    <p>Dad was struggling to find the socially acceptable term for the request: he was sure that the phrase “sleep-over” was eschewed by the younger crowd. What was the word for “hanging out” overnight? Finally, in a well-intentioned epiphany of vocabulary, my dad sputtered,</p>

    <blockquote>
      <p>…Could Jacob and Neill have a <strong>HANG</strong>-over tonight?!</p>
    </blockquote>

    <p>Needless to say, Jacob did not spend the night at the Robson household that evening.</p>
  </li>
  <li>
    <p>Best board game? Best video game?</p>

    <p>Although I’ve never played a full session before, I have always venerated the Japanese board game <a href="https://en.wikipedia.org/wiki/Go_game">Go</a> for its simplicity and stunning depth of strategy. There is only one type of piece, and they never move once placed, yet it took exponentially more computing power for artificial intelligence to beat a human at Go than it did for the game of Chess, with its sundry rules and moves.</p>

    <p>Best video game is, without the shadow of a doubt, <a href="http://store.steampowered.com/app/210970/The_Witness/">The Witness</a>. It is a marvellous tapestry outlining human intelligence and philosophy, and a shining example of nonverbal communication. It is the one video game that I believe would have engaged C.S. Lewis, Steve Jobs, and Douglas Hofstadter alike.</p>

    <figure><img src="/assets/images/2018/01/the-infamous-liebster-award/witness.jpg" alt="logo for The Witness" title="Beautiful." /><figcaption>Beautiful.</figcaption></figure>
  </li>
  <li>
    <p>How do you feel about autocorrect when texting?</p>

    <p>I’ve personally turned it off on my phone, because I like to make a habit of proofreading whatever I write (even if it’s just a text message). However, I also readily admit that this practice decreases the efficiency of my communication with others and that the misunderstandings arising from autocorrect are sometimes more valuable lessons than simply fixing typos in the first place. It all depends on your audience, I suppose!</p>
  </li>
  <li>
    <p>If someone gave you a free, two-way ticket to Mars would you go?</p>

    <p>Actually, I think I would! Now, I would still want a year or so to get all of my affairs in order and make sure that my family and friends are all comfortable (!) with the decision. But considering the scientific and psychological advances that humanity would approach through such an experience, if some space-exploring entity deemed me fit to take such a journey, I would happily spend a significant part of my life exploring God’s creation in a way that no one else to this day has been privileged to do.</p>
  </li>
</ol>

<h2 id="facts-delivered">Facts Delivered</h2>

<ol>
  <li>My favorite ingredient in any dish (where it is appropriate, of course) is the caper.</li>
  <li>I drove my date to the senior prom in my grandfather’s 1995 Oldsmobile Cutlass Ciera.</li>
  <li>I’ve remapped my keyboard so that the <code>capslock</code> key acts as <code>esc</code> when tapped and as <code>ctrl</code> when held down along with another key. My left <code>ctrl</code> key is mapped to <code>capslock</code>.</li>
  <li>
    <p>My first paying job was acting as the cow mascot for Chick-fil-A. I had to quit because I grew too tall for the suit.</p>

    <figure><img src="/assets/images/2018/01/the-infamous-liebster-award/chick-fil-a-cow-day-2013.jpg" alt="A Chick-fil-A cow mascot" title="Is that me?! Wouldn't you like to know..." /><figcaption>Is that me?! Wouldn't you like to know...</figcaption></figure>
  </li>
  <li>The first programming language I took classes and achieved fluency in is <a href="http://jsoftware.com/">J</a>. My teacher was <a href="https://www.linkedin.com/in/henry-rich-5b7503131/">Henry Rich</a>.</li>
  <li>When I took an ideology test in high school, measuring my political views on a spectrum of -72 (left/liberal) to +72 (right/conservative), I received a stunning +2. Since then, my views haven’t changed much: last time I took the test, I had migrated to +6.</li>
  <li>I have never crashed a motor vehicle (knock on wood!).</li>
  <li>
    <p>The latest I have ever stayed awake is 3am: I was infuriated because I could not connect to a Raspberry Pi headless (without a monitor). I have never pulled a true all-nighter.</p>

    <figure><img src="/assets/images/2018/01/the-infamous-liebster-award/rpi.png" alt="The Raspberry Pi motherboard, shown to sacle." title="I've never tasted a real raspberry pie before: only the bitter tears of bootstrapping one." /><figcaption>I've never tasted a real raspberry pie before: only the bitter tears of bootstrapping one.</figcaption></figure>
  </li>
  <li>I prefer colder climates over warmer ones: not because I like being outside in the cold, but because I love the feeling and smell of indoor heating (stove, fireplace, etc) more than the atmosphere made by indoor cooling (fans, air conditioning).</li>
  <li>One of my childhood comfort foods was white rice with cupcake sprinkles mixed in.</li>
  <li>I used to be terrified of my elementary school’s janitor, because he was from China and could not speak English well. Being unable to communicate was a prodigious fear for me, so I never talked to him.</li>
</ol>

<h2 id="questions-asked">Questions Asked</h2>

<ol>
  <li>If you could replace all the water on Earth with one other homogeneous chemical substance–with the assurance that life on Earth could still survive exactly as it does now by drinking that chemical–what substance would you choose and why?</li>
  <li>What are three adjectives that your worst enemy would use to describe you?</li>
  <li>You’re going to a desert island and you get to take one book with you, but I get to rip out my choice of 50% of the pages before giving it to you. What book do you choose?</li>
  <li>All world governments are now replaced with arbitrary Fortune 500 companies. You have your choice of living under any one of them. Which do you choose?</li>
  <li>You’re sentenced to death row, and given the choice of your last meal. What do you choose?</li>
  <li>
    <p>What is your favorite constant number? Zero, One, Pi, Euler’s Constant, the Imaginary Number? Constant of permittivity or permeability? Something else?</p>

    <figure><img src="/assets/images/2018/01/the-infamous-liebster-award/math.jpg" alt="Handwritten Latin and Greek alphabets" title="My handwriting? Ha. I wish..." /><figcaption>My handwriting? Ha. I wish...</figcaption></figure>
  </li>
  <li>Describe the last experience that made you laugh without those around you finding it amusing.</li>
  <li>Describe the last experience where everyone else found something hilarious that you didn’t understand.</li>
  <li>From now on, you are only allowed to listen to one genre of music. Which genre do you choose?</li>
  <li>Which conspiracy theory do you most want/hope to be true? Why?</li>
  <li>Set a timer for four hours from now (or whenever you are not working on the blog post you are currently writing). When the timer rings, immediately paste the contents of your computer’s clipboard, save them, and explain their context as the answer to this final question.</li>
</ol>

<h2 id="nominations">Nominations</h2>

<h3 id="aka-the-plot-twist"><em>a.k.a. The Plot Twist</em></h3>

<p>Having poured so much effort into this blog so far, I am ashamed to leave it incomplete due to a single negative perspective found on the Internet. However, as a matter of respect for other content producers and young professionals trying to establish a personal brand online, I have decided not to distribute any nominations for the Liebster award.</p>

<p>Why did I make this decision?</p>

<p>Upon attempting to find eleven blogs with under two hundred followers (as the rules specify), I stumbled upon <a href="https://en.forums.wordpress.com/topic/for-liebster-awards-how-do-i-find-out-how-many-followers-a-blog-has?replies=5">this conversation</a> that condemned “blog awards” as amateurish attempts to artificially raise SEO rankings. Even blogs with valuable and unique content can have their reputation undermined by getting caught up in chain-based blog awards. Regardless of one’s intention in posting, partaking in such activities gives the appearance of one floundering for quality material.</p>

<p>I will still publish this post as it is, because I respect the person who awarded me the Liebster and wish to support her in her first steps into blogging. However, I do not want to put anyone else under duress by publicly pressuring them to publish content that they do not feel is consistent with their online persona or professional image.</p>

<p>(As an aside, I am well aware of the irony of my decision, given that my blog likely has under 10 readers and is far from “public pressure”!)</p>

<p>That being said, I encourage anyone reading this blog who feels comfortable responding to the aforementioned questions–whether by commenting, blogging, posting on social media, or even shooting me an email–to take a chance and codify your thoughts! Sharing our lives with others through written language is a stimulating challenge and a wonderful blessing from God, and if nothing else I hope that this discursive draft has inspired a few others to transform thoughts into words.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Ecclesiastes 3:1. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Neill Robson</name></author><category term="blogging" /><category term="personal" /><category term="family" /><summary type="html"><![CDATA[As an encouragement to continue sharing my thoughts and experiences online, a person near and dear to my heart nominated me for the Liebster Award.]]></summary></entry><entry><title type="html">Access vs. Ownership</title><link href="https://neillrobson.com/blog/2017/05/29/access-versus-ownership/" rel="alternate" type="text/html" title="Access vs. Ownership" /><published>2017-05-29T00:00:00+00:00</published><updated>2017-05-29T00:00:00+00:00</updated><id>https://neillrobson.com/blog/2017/05/29/access-versus-ownership</id><content type="html" xml:base="https://neillrobson.com/blog/2017/05/29/access-versus-ownership/"><![CDATA[<p>Recently I came across advertising online for a new co-living experiment taking
place in Los Angeles. The name of the startup is PodShare. Essentially, the goal
is to provide customers with location-independent access to a minimal set of
resources necessary to live and work effectively in an urban environment. <!--more--> A bunk
on a wooden frame, a charging station, and a chalkboard identifying the
inhabitant are included in the package; doors, locks, and curtains are not.
Aside from the bed itself, all areas within a PodShare location are public: the
refrigerator and cooking utilities are shared, workspaces are common, and the
restrooms are handled dormitory-style. Maintaining a clean and safe environment
is as much the residents’ job as it is the staff’s, in the sense that everyone’s
space can be seen from all angles, creating an aura of community watch.</p>

<figure><img src="/assets/images/2017/05/access-vs-ownership/clean-pods.jpg" alt="PodShare bunk beds" title="A typical quiet afternoon amongst the pods" /><figcaption>A typical quiet afternoon amongst the pods</figcaption></figure>

<p>If this description is hard to visualize, a good video providing an overview and
history of the startup can be found
<a href="https://www.youtube.com/watch?v=H_ILu-R-Nz8">here</a>.</p>

<h2 id="the-bare-luxuries">The Bare Luxuries</h2>

<p>My initial reaction to this foreign living concept could be described best as a
shameful terror. Terror, because I couldn’t imagine living in a situation so
hostile to privacy and ownership of space. Shame, because in the culture that is
starting this movement towards “Housing as a Service,” I recognize values and
visions that I myself hold dear. Would rejecting this development make me a
hypocrite?</p>

<p>In truth, the initiative of PodShare makes several steps toward a lifestyle that
I have learned to esteem. To enjoy a content and fulfilling life in such an
environment, you can’t have too much baggage: there aren’t many nooks large
enough for one to unload their extra belongings, and there aren’t many ears
patient enough for one to unload their ponderous past. “Podestrians,” as they
are called, must minimize their possessions to the bare necessities. Wherever
one life is lacking, another life is prepared and encouraged to fill the gap.</p>

<p>The environmental benefits are also considerable. The most bare-bones apartment
complex that could accommodate the same number of men and women would require at
least three times the land area and an order of magnitude more capital
resources, not to mention the marginal costs and inefficiencies associated with
independent thermostats, water lines, and electric service. Furthermore,
splitting the community into individual <em>houses</em> would practically necessitate
the construction of a new subdivision: an impossibility in any principally urban
environment.</p>

<p>Taking the idea to an even larger scale, PodShare claims that if it were to
expand its influence far enough, one would no longer need to book a hotel when
travelling. After all, a bed in one location is a bed in <em>any</em> location with a
vacancy–just check out of your hometown PodShare and catch a bus to your new
location! How inconceivable that freedom is to the modern American citizen: the
concept that moving across the country for a week, month, or indefinitely could
be as simple as packing some carry-ons and catching a flight. Realtors,
mortgages, and moving vans need not apply. Sell your house, and ditch that
timeshare too: <strong>your bed <em>is</em> your timeshare now.</strong></p>

<h2 id="ownerships-intrinsic-value">Ownership’s Intrinsic Value</h2>

<p>PodShare challenges our very definitions of house and home. “The future is
access, not ownership,” claims Elvina Beck, the founder of the company.
Millennials invest in gym memberships, public transportation, and music
streaming services rather than purchasing the physical capital necessary to
enjoy these luxuries for ourselves. Why not extend that idea to our very homes?</p>

<figure><img src="/assets/images/2017/05/access-vs-ownership/community.jpg" alt="Elvina Beck" title="The occasional evening activity creates a sense of community. Hopefully nobody was looking to sleep tonight." /><figcaption>The occasional evening activity creates a sense of community. Hopefully nobody was looking to sleep tonight.</figcaption></figure>

<p>I do agree that, in the general case, owning less can lead to living more. Our
culture in the United States has lost much of that compassionate, cooperative
nature that first brought society together when individuals would have failed
living alone. To put less reliance on the grasp of one’s own two hands, and
instead seek to be a strength in others’ weaknesses as they likewise provide
what you may lack, fills one’s soul in a beautiful and irreplaceable manner.</p>

<p>But to what extent must we deny our own desire for control over physical
possessions to reap the intangible benefits of a cooperative lifestyle? Are
there not memories, emotions, and even fragments of our identity engrained in
our living spaces that could not exist without a sense of locality, of
ownership?</p>

<p>Motivational speaker <a href="http://www.simplybenglenn.com/">Ben Glenn</a> offers a
powerful example of this concept. To this day, I can recall with vivid detail
the Spring evening in 2009 when I witnessed him transform a black canvas into an
breathtaking explosion of variegated color before our eyes. The audience
journeyed with him step by step through the discovery process of artistic
creation, and by the end of the experience we all felt as though we, too, owned
the final work. Watching Ben share the exact same message at a different venue
or via a different medium holds none of the same gravity for me, because my
ownership and identity is contained in that one particular event, time, and
place.</p>

<p>Would I be satisfied if, rather than attending that 2009 conference, I simply
received a recording of the event, to be viewed on demand at any location or
time? More importantly, if I had never experienced the original, <em>would I even
know what I was missing from the experience?</em></p>

<figure><img src="/assets/images/2017/05/access-vs-ownership/ben-glenn.jpg" alt="Ben Glenn" title="Ben may create the same drawing thousands of times, but the one he crafted when I was in attendance was uniquely mine. No recreation does it justice." /><figcaption>Ben may create the same drawing thousands of times, but the one he crafted when I was in attendance was uniquely mine. No recreation does it justice.</figcaption></figure>

<p>I do not believe I could describe with any accuracy the psychological difference
between owning a home and having geographically-independent access to shelter,
but I can only imagine that the effect would be similar to replacing such an
intimate artistic experience with a recording. Though the instrumental value of
housing has been demonstrated to be extractable into an on-demand construct, the
spirit of home feels tied intrinsically to geography. Stripping ourselves of
that luxury may not leave us physically homeless, but surely impoverished in
spirit. As Yi-Fu Tuan would perhaps characterize the change, we would be
accumulating the freedom of <em>space</em> at the expense of the identity and security of
<em>place</em>.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<h2 id="a-divine-model">A Divine Model</h2>

<p>For much of His ministry on earth, Jesus was truly homeless. “Foxes have dens
and birds of the sky have nests, but the Son of Man has no place to lay His
head,” Jesus stated in response to a scribe’s possibly naive proclamation of
devotion.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> Were His disciples willing to give up not only the physical comforts
of shelter, but the very identity tied to their earthly homes, in order to
accept adoption into God’s kingdom by Christ’s sacrifice? In what capacity is my
worldly identity preventing me from perceiving the transformation that God so
desires to work in His child and slave?</p>

<p>And on a deeper inspection of Christ’s life, giving up house did not mean giving
up home. His ties to his earthly family were not lost: rather, He found His
family multiplied to all who followed the will of His Father.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> He shared
meals with brothers in the houses of the rich and poor, in the city and on the
beach, with intimacy and with thousands. He invested none of His identity in an
earthly dwelling, and yet He has arguably produced the greatest impact on
history and society that any individual has ever effected.</p>

<p>I’m not ashamed to admit that, given my upbringing and human nature, the idea of
housing as evanescent “access” in contrast to home ownership scares me. But
looking at the life of my King, as well as the consequences of our past and our
hopes for the future, I believe that this physical and cultural transformation
may have the potential for great salutary good, should we give it the proper
thought and introspection.</p>

<p>…And let’s be honest, PodShare has no plans for global domination by any
extent: they still receive most of their business from millennial vagabonds and
summer camps. We have ample time to reflect and discuss!</p>

<p>What are your thoughts on this housing movement? Let me know in the comments
below.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>For a fascinating and edifying discussion on this topic, see Tuan’s work
<a href="https://www.upress.umn.edu/book-division/books/space-and-place">Space and Place</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Matthew 8:20, HCSB <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Matthew 12:49-50 <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Neill Robson</name></author><category term="personal" /><category term="lifestyle" /><summary type="html"><![CDATA[Recently I came across advertising online for a new co-living experiment taking place in Los Angeles. The name of the startup is PodShare. Essentially, the goal is to provide customers with location-independent access to a minimal set of resources necessary to live and work effectively in an urban environment.]]></summary></entry><entry><title type="html">The Tea</title><link href="https://neillrobson.com/blog/2016/06/15/the-tea/" rel="alternate" type="text/html" title="The Tea" /><published>2016-06-15T08:16:38+00:00</published><updated>2016-06-15T08:16:38+00:00</updated><id>https://neillrobson.com/blog/2016/06/15/the-tea</id><content type="html" xml:base="https://neillrobson.com/blog/2016/06/15/the-tea/"><![CDATA[<blockquote>
  <p>When in China, drink like the Chinese drink.</p>
</blockquote>

<p>That’s the goal, and the beverage of choice over here is, as you probably know, tea.</p>

<!--more-->

<p>Tea is one aspect of Chinese culture that cannot be exaggerated by even the most embarrassingly inaccurate caricatures. It truly is everywhere: tea is served at nearly every restaurant and cafeteria you enter, you receive boiling water and teabags every morning in your dorm room, and you’ll more often see thermoses than water bottles in people’s hands on the street. Honestly, the unofficial adoption of tea as the national drink of China is (in my humble opinion) an excellent decision. After all, while tap water is risky and alcohol doesn’t quench one’s thirst, boiling water is bacteria-free, offers no health risks (other than burning oneself, of course) and, on the contrary, is allegedly healthier to drink than cold beverages! Furthermore, tea comes in so many forms and varieties (from the medicinal stuff to the nasty wannabe Starbucks knockoffs) that, like wine, one will never run out of new varieties and subtleties to discover.  The wine analogy is accurate on a cultural level, too, insofar as China’s attitude toward tea mirrors the wine aficionados of the West.</p>

<p>During my time here in China, I had the wonderful opportunity to visit both a tea museum and tea plantation. And of all the experiences I’ve had, I do believe that nowhere was the culture shock more pronounced than in experiencing China’s devotion to tea. There aren’t as many pictures in this post as usual (for reasons you will shortly understand), but hopefully the narratives I’m coming home with will do at least some justice to the experience! I’ll try a slightly different post format this time, where the story will go along independently of the images, which will have separate captions describing them.</p>

<p>In any case, without further ado…</p>

<h2 id="the-plantation">The Plantation</h2>

<p>The most famous tea in China is without a doubt Longjing (龙井: “dragon well”) green tea. The only place in the world that it is grown is in the rural villages around West Lake in the city of Hangzhou, Zhejiang, China. Tea labeled “Longjing” from any other location (Sichuan, Yunan, etc.) is considered fake. Hangzhou takes their status as the sole producer of authentic Longjing tea very seriously; to visit one of these fabled tea plantations to get firsthand experience of the substance is only natural for any tourist in the area.</p>

<figure><img src="/assets/images/2016/06/P_20160608_161804_HDR.jpg" alt="Rolling hills of tea bushes" title="The rolling hills of tea bushes." /><figcaption>The rolling hills of tea bushes.</figcaption></figure>

<p>As the bus drove into the countryside, several relatively large houses slid past our view.</p>

<p>“Tea farmers,” explained our tour guide, “is one of most rich people in China. Actually only some business men more money than Longjing farmers.”</p>

<p><em>How much do they sell this stuff for?</em> I wondered. <em>In restaurants, tea seems to be too cheap to charge for!</em></p>

<p>Oh, how ignorant I was.</p>

<p>Arriving at the location where we were to be given a tour of the farming and processing procedures, we stepped off the bus into a humid gray day and meandered over to the nearest Longjing tea bush. They weren’t by any means in short supply; these bushes were about chest high on average and lined every hill and valley we drove through. Seeing the luscious, deep green leaves on the bush we were examining, I wondered why this one hadn’t yet been stripped clean.</p>

<figure><img src="/assets/images/2016/06/P_20160603_150529.jpg" alt="Tourists picking tea leaves" title="Tourists love to pretend that they know how to pick tea leaves." /><figcaption>Tourists love to pretend that they know how to pick tea leaves.</figcaption></figure>

<p>“Actually this one already harvested by farmers,” our guide corrected us. “Good quality Longjing tea, only sprout leaves used, maybe one or two on a twig.”</p>

<p>We were shown a recently harvested leaf and realized that they were hardly more than sprouts. Leaves any longer than your pinky toe were already too mature, and would be left on the bush until the next season. The ideal Longjing tea leaves, the guide informed us, should look like a small bird’s tongue protruding from its mouth. Me being the pragmatic guy I am, I naturally assumed that this was just a bunch of snobbish talk. However, further research revealed that such picky harvests are in fact vital to creating a tea with the proper chemical balance: extended exposure to the elements produces oxidation which ruins many of the precious nutrients within the leaves.</p>

<p>Naturally, to pick just the sprouting leaves on an individual or two-by-two basis, no machines are suitable for the task: only hand-picking will do the trick. There are three harvest times–one in Spring, Summer, and Autumn–and each harvest is supposedly of a “lower quality” than the previous one.</p>

<p><em>Okay,</em> I thought, <em>that imposes a bit of a limit on how much of this stuff is actually produced. How many kilograms of tea are harvested per bush?</em></p>

<p>That answer depends on when during processing you are measuring the weight. Harvested leaves must be dry-fired in a large iron pan almost immediately upon separation from their host bush, so as to avoid the dreaded effects of oxidation. The first firing evaporates external moisture, and the second firing yields leaves in their final, dry (but not yet shriveled), sterile state. To avoid defacing the bird-tongue-like beauty of these little Longjing sprouts, the firing process must also be done by hand. I do not exaggerate when I say that these tea farmers stick bare palms into pans of roasting iron and spread the tea leaves around the bottom without so much as a blister appearing on their own fingers. Either those farmers’ hands are made of rubber, or those Longjing tea leaves should be used as insulation in fire-safe buildings. Holy cow.</p>

<p>So, the amount of tea per bush? Let’s just say it’s not measured in kilos, but in <em>grams</em>. And we were standing in the only plantation officially recognized by China as producing this product.</p>

<p>Oh, and by the way, 1.3 billion people want to buy this stuff. So it’s pretty valuable.</p>

<h2 id="the-demonstration">The Demonstration</h2>

<p>After strolling around the plantation for a little while, we were escorted into a small building with simple, traditional Chinese architecture, and then through some sliding doors into what looks like a conference room. A long oval table stretches the length of the room, and on one end are situated several dozen bound paper packages and green cans. The group is seated and everyone is given an empty glass.</p>

<p>A smartly-dressed young woman enters the room and closes the doors behind her. Taking her place at the head of the conference table with the packages and cans, she proceeds to explain to the group where and how Longjing tea is enjoyed. At the same time, her hands, moving seemingly independent of her mind, begin unwrapping one of the packages and depositing a pinch of the contents into each of our glasses. Boiling water is added, and the Longjing tea in front of each of us begins to steep.</p>

<figure><img src="/assets/images/2016/06/P_20160603_154723.jpg" alt="A kettle of purple Yixing clay" title="The taste profile of Longjing tea is supposedly diminished if the beverage is not first steeped in a kettle of purple Yixing clay." /><figcaption>The taste profile of Longjing tea is supposedly diminished if the beverage is not first steeped in a kettle of purple Yixing clay.</figcaption></figure>

<p>Typically, the highest quality Longjing tea (the first pickings) are reserved specifically for government officials and for gifts distributed by Chinese foreign ambassadors. The little that remains is often auctioned off, yielding prices up to thousands of US dollars for a single gram (hardly enough to make a single glass). Because of its value, a person typically re-uses the same tea leaves in a given glass or thermos for an entire working day, refilling it with boiling water whenever necessary.</p>

<p>“Okay, time to begin appreciating Longjing tea,” announces our lecturer. We raise the glasses to our lips, but she scolds us and tells us first to swirl the tea in our glasses and then inhale the steam. …So this stuff really <em>is</em> supposed to be consumed like wine.</p>

<p>Okay, we’ve sniffed it and it smells like collard greens. Now we flex our lips in preparation to consume the liquid and–</p>

<p>“Stop, you first need to look at Longjing tea. Hold glass like this and open wide eyes.”</p>

<p>She cups her hand over the glass and directs the steam from the cup into her left eye. Reluctantly, we all follow suit, and switch eyes on her command.</p>

<p>“This cures cataract,” explained our guide. “After look at computer for all day, you should look at Longjing tea instead.”</p>

<p>Okay, now it’s definitely time to start drinking it. After blowing the leaves out of the way, we take some tiny sips of the scalding hot liquid and, well, it tastes pretty good! “Collard greens” is still the first thought that comes to my mind, but that isn’t to say that the gustatory experience was unsatisfactory–on the contrary, I greatly enjoy collard greens, and I was perfectly fine drinking collard green broth if that’s what they do here in China.</p>

<figure><img src="/assets/images/2016/06/P_20160603_154144.jpg" alt="A teacup of pure white jade" title="If you don't consume tea from a glass of pure white jade, you're obviously not worthy of it gracing your lips." /><figcaption>If you don't consume tea from a glass of pure white jade, you're obviously not worthy of it gracing your lips.</figcaption></figure>

<p>Little did I know how much more this liquid was than simply “collard green broth.”</p>

<p>While we were sipping away, our lecturer was busy filling up a glass with her own mixture of substances, while talking away at a pace that would make Mr. Shamwow proud. Beginning with a healthy spoonful of rice, she explained that she was mixing together a scaled-down chemical equivalent of a person’s typical daily diet. She proceeded to add various oils and syrups, ranging from soy sauce to peanut oil to lard to molasses, and mixed the glass’s contents together into a brown mush.</p>

<p>“Some are people who drink water cleanse out diet,” she informed us as she poured a glass of water into the mush and swirled it around. “But not very effective.” The water was poured out again, much more turbid after the treatment, but leaving just as much mush in the original glass.</p>

<p>“Now we try same thing, but with Longjing tea.” She poured more water into the glass, then produced a small pill from one of the boxes on the table. “This same as ten cup of Longjing tea. You can also buy here and take, like vitamin.”</p>

<p>Into the glass the pill was thrown, and the mixture was carefully swirled once more.</p>

<p>“Now we empty again.” The disposal container received the second batch of dirty water–this time pitch black as it was poured away. A collective gasp went up from those who looked into the original glass of mush.</p>

<p>All that remained were fresh, white grains of rice.</p>

<p>“So you see, very good for body!”</p>

<h2 id="the-sale">The Sale</h2>

<p>Now, I don’t actually know how healthy it is to be drinking a liquid that is capable of extracting any visible presence of salt, sugar, and fat from one’s intestines. On the other hand, we just witnessed what seemed like pure witchcraft, and not one of us could claim to be left unaffected by the dramatic performance.</p>

<figure><img src="/assets/images/2016/06/P_20160603_154323.jpg" alt="An opulent tea room" title="How I imagine the Count of Monte Cristo's tea room is decorated." /><figcaption>How I imagine the Count of Monte Cristo's tea room is decorated.</figcaption></figure>

<p>Our presenter, seeing our wide eyes and gaping mouths, knew it was time to make her strike.</p>

<p>An assistant was called in and the two women began throwing open the brown paper packages, revealing every shade of green Longjing leaves imaginable. The now mystical scent of collard greens filled the locked, windowless conference room. The orchestrator of the presentation slipped on a pair of skin-tight white gloves and picked up one of the green canisters.</p>

<p>“The leaves still fresh from roasting, not packaged for you yet,” we were informed, as the lid of the canister was popped off by those anonymous gloved hands and the empty, stainless inside was presented to the audience. “We package here for you now.”</p>

<p>A white glove dove into the mounds of Longjing leaves and pulled out a few handfuls, depositing them one by one into the canister until tea was piled to the top.</p>

<p>“This look full, but be assured,” warned our saleswoman, with rising urgency, “some settlement may occur.”</p>

<p>Placing a gloved hand over the top of the can, she bashed the bottom of the can into the table several times. While the sound was still ringing in our ears the hand was removed, revealing a can only two-thirds full.</p>

<p>“Is why we pack here, so you see we pack actually very full.”</p>

<p>Again and again she scooped up tea leaves, packing them into the can with force that must have rivaled the vacuum bags some of us used to bring our clothes to China. The lid was finally crammed onto the top, and the can was passed to the assistant who mechanically sealed it closed and rested it upon her hand.</p>

<p>“So you see, very full. If you doubt, please pack yourself.”</p>

<p>Other products were set out on display before us, from Longjing tea cakes to the ultra-concentrated colon-cleansing pills that sterilized the rice. After everything had been presented and positioned with care, the statement that everyone had been waiting for was uttered.</p>

<p>“You not barter here, we set fix price. For high-quality Longjing tea, one canister, regular price 600 yuan. We give to you half price, 300 yuan. You may pay RMB, USD, or the credit card.”</p>

<p>We all began to cast sidelong glances at each other as we shuffled through our wallets. This stuff obviously wasn’t the “first picking” seen at auctions–the price was too unbelievably low for that–but nonetheless, we had just seen with our eyes and tasted with our tongues the substance that was now being packaged before us, so we had little excuse to object to the trade.</p>

<figure><img src="/assets/images/2016/06/P_20160603_164655.jpg" alt="Compressed tea cakes" title="Compressed tea cakes, with price tags running around $240-250." /><figcaption>Compressed tea cakes, with price tags running around $240-250.</figcaption></figure>

<p>Large stacks of bills started trading hands. As I watched my peers, my only thought was how illicit this whole process seemed to be: sitting around a conference table in a locked room with no decor, hungrily observing gloved hands pack mysterious dried leaves into sealed canisters to be passed along to a customer for a large sum. When we were finally released into the open air again, hardly anybody carried their purchases in their bare hands: the vast majority left these goods tucked away with care in the bottom of a purse or backpack. Some people could be observed absentmindedly tapping their bags occasionally to reassure themselves that their purchase had not left them.</p>

<p>I only hope that we are not caught in customs returning home.</p>

<hr />

<p>And that’s the story of my experience with the culture of tea in China. Needless to say, the process left quite a significant impression on me, and I definitely believe that, regardless of its mystical and prodigious alleged properties, it will take a much more extensive role in my diet back home in the United States!</p>

<figure><img src="/assets/images/2016/06/P_20160603_151658.jpg" alt="Historic tea garden advertisement" title="Hongchow's Mur Kee Tea Gardens: drinks so good, they'll make you wanna slap yo' momma." /><figcaption>Hongchow's Mur Kee Tea Gardens: drinks so good, they'll make you wanna slap yo' momma.</figcaption></figure>

<p>So far, I’ve located green tea popsicles, green tea toothpaste, and green tea ice cream here in China. There’s no doubt that I’ll be paying premium to get my hands on the stuff back home. Say goodbye to my poor wallet…</p>]]></content><author><name>neill</name></author><category term="china" /><category term="travel" /><category term="food" /><category term="personal" /><summary type="html"><![CDATA[When in China, drink like the Chinese drink. That’s the goal, and the beverage of choice over here is, as you probably know, tea.]]></summary></entry><entry><title type="html">The Environment</title><link href="https://neillrobson.com/blog/2016/06/09/the-environment/" rel="alternate" type="text/html" title="The Environment" /><published>2016-06-09T10:03:11+00:00</published><updated>2016-06-09T10:03:11+00:00</updated><id>https://neillrobson.com/blog/2016/06/09/the-environment</id><content type="html" xml:base="https://neillrobson.com/blog/2016/06/09/the-environment/"><![CDATA[<p>So many of my experiences in Hangzhou are relatively small excursions: individually, they aren’t worth an entire blog post, but they amount to quite a bit when added up! At the same time, a “Miscellaneous” blog post should honestly be saved for the end of a trip, so I’ll try my best to theme this one as more nature-related. <!--more--> Indeed, the vast majority of Hangzhou’s attractions are outdoors–a characteristic that I greatly admire!</p>

<figure><img src="/assets/images/2016/06/P_20160514_145419.jpg" alt="house of courtyards" /></figure>

<p>Near the beginning of our trip we visited a Chinese mansion exhibiting some of the older architectural styles of China. The Chinese culture of the time took an incredible amount of liberties with indoor/outdoor spaces to create an astonishingly beautiful effect. Areas such as the ones pictured above and below were entirely “inside” the house, and doors could just as easily lead to artificial caves as they could lead to “rooms” as we think of them in the US.</p>

<figure><img src="/assets/images/2016/06/P_20160514_151809.jpg" alt="stone path over river" /></figure>

<figure><img src="/assets/images/2016/06/P_20160514_155700.jpg" alt="floor plan" /></figure>

<p>Above is a floor plan of the house. As you can see, most places are naturally exposed to the elements, and roofs only exist over the edges of major rooms.</p>

<figure><img src="/assets/images/2016/06/P_20160514_144930.jpg" alt="kitchen" /></figure>

<p>Also, your modern American “dream kitchen” can’t shake a stick at the massive size of the facilities in this bachelor’s place. There are full ovens on both sides of that marble counter on the right.</p>

<figure><img src="/assets/images/2016/06/P_20160514_144733.jpg" alt="bonsai" /></figure>

<p>And yeah, they also grew bonsai trees to obnoxiously large sizes. (Thanks to Michael for posing next to this one, for scale!)</p>

<figure><img src="/assets/images/2016/06/P_20160518_102120.jpg" alt="lilypad landscape" /></figure>

<p>Hangzhou is also known for its enormous and beautiful botanical gardens, of which I took quite a few photos.</p>

<figure><img src="/assets/images/2016/06/P_20160518_102801.jpg" alt="fake deer" /></figure>

<p>Although they may be known for their flowers, the botanical gardens certainly aren’t known for their wildlife!</p>

<figure><img src="/assets/images/2016/06/P_20160518_102527.jpg" alt="boat" /></figure>

<figure><img src="/assets/images/2016/06/P_20160518_104013.jpg" alt="circle door" /></figure>

<p>Doors are always a favorite posing spot for us.</p>

<figure><img src="/assets/images/2016/06/P_20160518_105418-1.jpg" alt="lake, no lilies" /></figure>

<figure><img src="/assets/images/2016/06/P_20160518_111110.jpg" alt="rock garden" /></figure>

<p>When you can’t grow flowers, you can always fall back on your splendid rock collection!</p>

<figure><img src="/assets/images/2016/06/P_20160522_152556-1.jpg" alt="distant pagoda" /></figure>

<p>We also went out to quite a few temples and pagodas–some more accessible than others. We found that when it comes to trails, the Chinese have very low tolerance for handicap-accessibility or even general safety measures. Most of the time, the only precaution taken would be a sign such as the one below, ordering people not to climb. We can see how well that went:</p>

<figure><img src="/assets/images/2016/06/P_20160522_152915.jpg" alt="don't climb" /></figure>

<p>Some people in our group were a bit more adventurous than I upon these rocks; at first I thought it was because they couldn’t read the warnings in Chinese, but I was quickly put in my place.</p>

<figure><img src="/assets/images/2016/06/P_20160522_154755.jpg" alt="cherished life" /></figure>

<p>(Thanks for the photo op, Patrick!)</p>

<figure><img src="/assets/images/2016/06/P_20160522_154447_PN.jpg" alt="xihu panorama" /></figure>

<p>But climbing, of course, is where all the best views are.</p>

<figure><img src="/assets/images/2016/06/P_20160522_154502.jpg" alt="Eischen climbing" /></figure>

<p>And when your professors do it, it’s hard to overcome the social pressure, you know?</p>

<figure><img src="/assets/images/2016/06/P_20160525_140325.jpg" alt="stairs" /></figure>

<p>Anyway, the climbing trouble doesn’t end when you get to the pagoda…</p>

<figure><img src="/assets/images/2016/06/P_20160525_141904.jpg" alt="doorway" /></figure>

<p>especially not for tall guys like me.</p>

<figure><img src="/assets/images/2016/06/P_20160525_140852_LL.jpg" alt="roofing" /></figure>

<p>But the fabulously decorated walls and roofs encourage you as you cross the threshold of the 72nd floor on your way to the 134th…</p>

<figure><img src="/assets/images/2016/06/P_20160525_141125_HDR.jpg" alt="power lines" /></figure>

<p>Yeah, you are occasionally greeted with power lines or some other unfortunate presence in an otherwise serene environment, but I actually found the vast scale that they imply to be quite photogenic!</p>

<figure><img src="/assets/images/2016/06/P_20160525_141817.jpg" alt="tiny farm" /></figure>

<p>You take whatever sunlight you can get and make the most of it, you know?</p>

<figure><img src="/assets/images/2016/06/P_20160525_144035.jpg" alt="tiny pagoda" /></figure>

<p>Back on the ground floor of the place, I felt a lot taller than when I first arrived. I’m not sure if that’s the psychological effect of climbing the thing, or because…</p>

<figure><img src="/assets/images/2016/06/P_20160525_144430_BF.jpg" alt="hand on the stairs" /></figure>

<p>..there were actually a ton of mini pagodas scattered around the big one!</p>

<figure><img src="/assets/images/2016/06/P_20160525_144124_BF.jpg" alt="giant" /></figure>

<p>Fun times being a giant.</p>

<figure><img src="/assets/images/2016/06/P_20160525_145121_BF.jpg" alt="elephant" /></figure>

<p>Tried to use a selfie stick here, but I’m still too awkward with handling it. …Look at the expression on that elephant. He’s so judgmental! All like, “is this dude seriously using a selfie stick to take a photo with me? What a flippant, obnoxious foreigner! I would <em>never</em> attempt the same thing with <em>my</em> nose if I ever visited <em>his</em> country! Sheesh, what an American.”</p>

<figure><img src="/assets/images/2016/06/P_20160603_144337.jpg" alt="snail and hand" /></figure>

<p>In the US, when it rains, worms come out and cover the sidewalks. In China, the equivalent are the snails!</p>

<figure><img src="/assets/images/2016/06/P_20160604_072407_HDR.jpg" alt="clear day picture" /></figure>

<p>Just think of all the beautiful sunrises that the people in the US missed because they were busy watching the sunset over there!</p>

<figure><img src="/assets/images/2016/06/P_20160526_165525_HDR.jpg" alt="foggy day picture" /></figure>

<p>It’s just as beautiful on a foggy day too–don’t get me wrong.</p>

<p>Okay, that’s all for this blog! The next post will hopefully feature a pharmacy, tea museum, and underground bunker. See you next time!</p>]]></content><author><name>neill</name></author><category term="china" /><category term="travel" /><category term="personal" /><category term="nature" /><summary type="html"><![CDATA[So many of my experiences in Hangzhou are relatively small excursions: individually, they aren’t worth an entire blog post, but they amount to quite a bit when added up! At the same time, a “Miscellaneous” blog post should honestly be saved for the end of a trip, so I’ll try my best to theme this one as more nature-related.]]></summary></entry></feed>